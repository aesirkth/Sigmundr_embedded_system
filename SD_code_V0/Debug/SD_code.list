
SD_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08006b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002184  2000000c  08006b0c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002190  08006b0c  00022190  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000105fa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024be  00000000  00000000  00030636  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d28  00000000  00000000  00032af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bf0  00000000  00000000  00033820  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000069f6  00000000  00000000  00034410  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ec6  00000000  00000000  0003ae06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003eccc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003548  00000000  00000000  0003ed48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080069bc 	.word	0x080069bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080069bc 	.word	0x080069bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f92d 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f006 f886 	bl	8006658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f937 	bl	80007ea <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f90d 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	2000005c 	.word	0x2000005c

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000005c 	.word	0x2000005c

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad2      	subs	r2, r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f7      	bcc.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	2201      	movs	r2, #1
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	401a      	ands	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	2101      	movs	r1, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	1e59      	subs	r1, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff49 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff5e 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb0 	bl	8000758 <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
 800081e:	e165      	b.n	8000aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000820:	2201      	movs	r2, #1
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	429a      	cmp	r2, r3
 800083a:	f040 8154 	bne.w	8000ae6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d003      	beq.n	800084e <HAL_GPIO_Init+0x4a>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b12      	cmp	r3, #18
 800084c:	d123      	bne.n	8000896 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	08da      	lsrs	r2, r3, #3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3208      	adds	r2, #8
 8000856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	220f      	movs	r2, #15
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	4013      	ands	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	691a      	ldr	r2, [r3, #16]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	f003 0307 	and.w	r3, r3, #7
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	08da      	lsrs	r2, r3, #3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3208      	adds	r2, #8
 8000890:	69b9      	ldr	r1, [r7, #24]
 8000892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	2203      	movs	r2, #3
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4013      	ands	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 0203 	and.w	r2, r3, #3
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d00b      	beq.n	80008ea <HAL_GPIO_Init+0xe6>
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d007      	beq.n	80008ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008de:	2b11      	cmp	r3, #17
 80008e0:	d003      	beq.n	80008ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d130      	bne.n	800094c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	4013      	ands	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68da      	ldr	r2, [r3, #12]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4313      	orrs	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000920:	2201      	movs	r2, #1
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	091b      	lsrs	r3, r3, #4
 8000936:	f003 0201 	and.w	r2, r3, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4313      	orrs	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 80ae 	beq.w	8000ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4a5c      	ldr	r2, [pc, #368]	; (8000b00 <HAL_GPIO_Init+0x2fc>)
 8000990:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <HAL_GPIO_Init+0x2fc>)
 8000992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b59      	ldr	r3, [pc, #356]	; (8000b00 <HAL_GPIO_Init+0x2fc>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009a6:	4a57      	ldr	r2, [pc, #348]	; (8000b04 <HAL_GPIO_Init+0x300>)
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3302      	adds	r3, #2
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <HAL_GPIO_Init+0x304>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d025      	beq.n	8000a1e <HAL_GPIO_Init+0x21a>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4d      	ldr	r2, [pc, #308]	; (8000b0c <HAL_GPIO_Init+0x308>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01f      	beq.n	8000a1a <HAL_GPIO_Init+0x216>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <HAL_GPIO_Init+0x30c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d019      	beq.n	8000a16 <HAL_GPIO_Init+0x212>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4b      	ldr	r2, [pc, #300]	; (8000b14 <HAL_GPIO_Init+0x310>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0x20e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4a      	ldr	r2, [pc, #296]	; (8000b18 <HAL_GPIO_Init+0x314>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_Init+0x20a>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <HAL_GPIO_Init+0x318>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0x206>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a48      	ldr	r2, [pc, #288]	; (8000b20 <HAL_GPIO_Init+0x31c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_GPIO_Init+0x202>
 8000a02:	2306      	movs	r3, #6
 8000a04:	e00c      	b.n	8000a20 <HAL_GPIO_Init+0x21c>
 8000a06:	2307      	movs	r3, #7
 8000a08:	e00a      	b.n	8000a20 <HAL_GPIO_Init+0x21c>
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x21c>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x21c>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x21c>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x21c>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x21c>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a30:	4934      	ldr	r1, [pc, #208]	; (8000b04 <HAL_GPIO_Init+0x300>)
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a62:	4a30      	ldr	r2, [pc, #192]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a8c:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae0:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_GPIO_Init+0x320>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	f67f ae96 	bls.w	8000820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af4:	bf00      	nop
 8000af6:	3724      	adds	r7, #36	; 0x24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40013c00 	.word	0x40013c00

08000b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691a      	ldr	r2, [r3, #16]
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e001      	b.n	8000b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
 8000b64:	4613      	mov	r3, r2
 8000b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b68:	787b      	ldrb	r3, [r7, #1]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b74:	e003      	b.n	8000b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	041a      	lsls	r2, r3, #16
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	619a      	str	r2, [r3, #24]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e0ca      	b.n	8000d36 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ba0:	4b67      	ldr	r3, [pc, #412]	; (8000d40 <HAL_RCC_ClockConfig+0x1b4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 020f 	and.w	r2, r3, #15
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d20c      	bcs.n	8000bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <HAL_RCC_ClockConfig+0x1b4>)
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <HAL_RCC_ClockConfig+0x1b4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 020f 	and.w	r2, r3, #15
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d001      	beq.n	8000bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e0b6      	b.n	8000d36 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d020      	beq.n	8000c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d005      	beq.n	8000bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000be0:	4a58      	ldr	r2, [pc, #352]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000be2:	4b58      	ldr	r3, [pc, #352]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d005      	beq.n	8000c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bf8:	4a52      	ldr	r2, [pc, #328]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000bfa:	4b52      	ldr	r3, [pc, #328]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c04:	494f      	ldr	r1, [pc, #316]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d044      	beq.n	8000cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d107      	bne.n	8000c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2a:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d119      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e07d      	b.n	8000d36 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d003      	beq.n	8000c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d107      	bne.n	8000c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d109      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e06d      	b.n	8000d36 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e065      	b.n	8000d36 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c6a:	4936      	ldr	r1, [pc, #216]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f023 0203 	bic.w	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c7c:	f7ff fcb0 	bl	80005e0 <HAL_GetTick>
 8000c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c82:	e00a      	b.n	8000c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c84:	f7ff fcac 	bl	80005e0 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e04d      	b.n	8000d36 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 020c 	and.w	r2, r3, #12
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d1eb      	bne.n	8000c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_RCC_ClockConfig+0x1b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 020f 	and.w	r2, r3, #15
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d90c      	bls.n	8000cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_RCC_ClockConfig+0x1b4>)
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_RCC_ClockConfig+0x1b4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 020f 	and.w	r2, r3, #15
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d001      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e030      	b.n	8000d36 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d008      	beq.n	8000cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ce0:	4918      	ldr	r1, [pc, #96]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d009      	beq.n	8000d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cfe:	4911      	ldr	r1, [pc, #68]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d12:	f000 fb7b 	bl	800140c <HAL_RCC_GetSysClockFreq>
 8000d16:	4601      	mov	r1, r0
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_RCC_ClockConfig+0x1b8>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_RCC_ClockConfig+0x1bc>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_RCC_ClockConfig+0x1c0>)
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fc12 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00
 8000d44:	40023800 	.word	0x40023800
 8000d48:	08006ad8 	.word	0x08006ad8
 8000d4c:	20000008 	.word	0x20000008

08000d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d6c:	f7ff fff0 	bl	8000d50 <HAL_RCC_GetHCLKFreq>
 8000d70:	4601      	mov	r1, r0
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	0a9b      	lsrs	r3, r3, #10
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	08006ae8 	.word	0x08006ae8

08000d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d94:	f7ff ffdc 	bl	8000d50 <HAL_RCC_GetHCLKFreq>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	0b5b      	lsrs	r3, r3, #13
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000da6:	5cd3      	ldrb	r3, [r2, r3]
 8000da8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	08006ae8 	.word	0x08006ae8

08000db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d010      	beq.n	8000e12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000df0:	496f      	ldr	r1, [pc, #444]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000df2:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000df8:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e00:	4313      	orrs	r3, r2
 8000e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d010      	beq.n	8000e40 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000e1e:	4964      	ldr	r1, [pc, #400]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e20:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e26:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d017      	beq.n	8000e7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e4c:	4958      	ldr	r1, [pc, #352]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e4e:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e6a:	d101      	bne.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d017      	beq.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e88:	4949      	ldr	r1, [pc, #292]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e8a:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ea6:	d101      	bne.n	8000eac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 808a 	beq.w	8000fda <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4a39      	ldr	r2, [pc, #228]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000ee2:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000eee:	f7ff fb77 	bl	80005e0 <HAL_GetTick>
 8000ef2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ef6:	f7ff fb73 	bl	80005e0 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e278      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f1c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d02f      	beq.n	8000f84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d028      	beq.n	8000f84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f3a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8000f48:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d114      	bne.n	8000f84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fb41 	bl	80005e0 <HAL_GetTick>
 8000f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fb3d 	bl	80005e0 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e240      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0ee      	beq.n	8000f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f90:	d114      	bne.n	8000fbc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8000f92:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	608b      	str	r3, [r1, #8]
 8000fac:	e00c      	b.n	8000fc8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	42470e40 	.word	0x42470e40
 8000fbc:	4a4a      	ldr	r2, [pc, #296]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fbe:	4b4a      	ldr	r3, [pc, #296]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8000fc6:	6093      	str	r3, [r2, #8]
 8000fc8:	4947      	ldr	r1, [pc, #284]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fca:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000fe6:	4a41      	ldr	r2, [pc, #260]	; (80010ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000fee:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00a      	beq.n	8001012 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8000ffc:	493a      	ldr	r1, [pc, #232]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001004:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4313      	orrs	r3, r2
 800100e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00a      	beq.n	8001034 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800101e:	4932      	ldr	r1, [pc, #200]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102e:	4313      	orrs	r3, r2
 8001030:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d011      	beq.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001040:	4929      	ldr	r1, [pc, #164]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	4313      	orrs	r3, r2
 8001052:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800105e:	d101      	bne.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00a      	beq.n	8001086 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001070:	491d      	ldr	r1, [pc, #116]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001078:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	4313      	orrs	r3, r2
 8001082:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108e:	2b00      	cmp	r3, #0
 8001090:	d011      	beq.n	80010b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001092:	4915      	ldr	r1, [pc, #84]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a2:	4313      	orrs	r3, r2
 80010a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010b0:	d101      	bne.n	80010b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010c4:	f040 80ff 	bne.w	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80010ce:	f7ff fa87 	bl	80005e0 <HAL_GetTick>
 80010d2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80010d4:	e00e      	b.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80010d6:	f7ff fa83 	bl	80005e0 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d907      	bls.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e188      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80010e8:	40023800 	.word	0x40023800
 80010ec:	424711e0 	.word	0x424711e0
 80010f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80010f4:	4b7e      	ldr	r3, [pc, #504]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1ea      	bne.n	80010d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001110:	2b00      	cmp	r3, #0
 8001112:	d009      	beq.n	8001128 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800111c:	2b00      	cmp	r3, #0
 800111e:	d028      	beq.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d124      	bne.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001128:	4b71      	ldr	r3, [pc, #452]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800112a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	3301      	adds	r3, #1
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800113a:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800113c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001140:	0e1b      	lsrs	r3, r3, #24
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001148:	4969      	ldr	r1, [pc, #420]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	019b      	lsls	r3, r3, #6
 8001154:	431a      	orrs	r2, r3
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	085b      	lsrs	r3, r3, #1
 800115a:	3b01      	subs	r3, #1
 800115c:	041b      	lsls	r3, r3, #16
 800115e:	431a      	orrs	r2, r3
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	061b      	lsls	r3, r3, #24
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	071b      	lsls	r3, r3, #28
 800116c:	4313      	orrs	r3, r2
 800116e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001186:	d00a      	beq.n	800119e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001190:	2b00      	cmp	r3, #0
 8001192:	d035      	beq.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119c:	d130      	bne.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800119e:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80011a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011a4:	0c1b      	lsrs	r3, r3, #16
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	3301      	adds	r3, #1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80011b0:	4b4f      	ldr	r3, [pc, #316]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80011b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011b6:	0f1b      	lsrs	r3, r3, #28
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80011be:	494c      	ldr	r1, [pc, #304]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	431a      	orrs	r2, r3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	3b01      	subs	r3, #1
 80011d2:	041b      	lsls	r3, r3, #16
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	061b      	lsls	r3, r3, #24
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	071b      	lsls	r3, r3, #28
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80011e8:	4941      	ldr	r1, [pc, #260]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80011ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011f0:	f023 021f 	bic.w	r2, r3, #31
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	3b01      	subs	r3, #1
 80011fa:	4313      	orrs	r3, r2
 80011fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	2b00      	cmp	r3, #0
 800120a:	d029      	beq.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001214:	d124      	bne.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800121c:	0c1b      	lsrs	r3, r3, #16
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	3301      	adds	r3, #1
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800122a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800122e:	0f1b      	lsrs	r3, r3, #28
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001236:	492e      	ldr	r1, [pc, #184]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	3b01      	subs	r3, #1
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	431a      	orrs	r2, r3
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	061b      	lsls	r3, r3, #24
 8001254:	431a      	orrs	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	071b      	lsls	r3, r3, #28
 800125a:	4313      	orrs	r3, r2
 800125c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001268:	2b00      	cmp	r3, #0
 800126a:	d016      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800126c:	4920      	ldr	r1, [pc, #128]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	019b      	lsls	r3, r3, #6
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	085b      	lsrs	r3, r3, #1
 8001280:	3b01      	subs	r3, #1
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	061b      	lsls	r3, r3, #24
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	071b      	lsls	r3, r3, #28
 8001294:	4313      	orrs	r3, r2
 8001296:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff f99e 	bl	80005e0 <HAL_GetTick>
 80012a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80012a8:	f7ff f99a 	bl	80005e0 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e09f      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8095 	bne.w	80013f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80012d4:	f7ff f984 	bl	80005e0 <HAL_GetTick>
 80012d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80012da:	e00f      	b.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80012dc:	f7ff f980 	bl	80005e0 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d908      	bls.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e085      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	42470068 	.word	0x42470068
 80012f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001308:	d0e8      	beq.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001326:	2b00      	cmp	r3, #0
 8001328:	d02b      	beq.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132e:	2b00      	cmp	r3, #0
 8001330:	d127      	bne.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	3301      	adds	r3, #1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001344:	492f      	ldr	r1, [pc, #188]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	019b      	lsls	r3, r3, #6
 8001350:	431a      	orrs	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	3b01      	subs	r3, #1
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	4313      	orrs	r3, r2
 8001364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001368:	4926      	ldr	r1, [pc, #152]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800136c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001370:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	3b01      	subs	r3, #1
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	4313      	orrs	r3, r2
 800137e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01d      	beq.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001396:	d118      	bne.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	0e1b      	lsrs	r3, r3, #24
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80013a6:	4917      	ldr	r1, [pc, #92]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	3b01      	subs	r3, #1
 80013bc:	041b      	lsls	r3, r3, #16
 80013be:	431a      	orrs	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	061b      	lsls	r3, r3, #24
 80013c4:	4313      	orrs	r3, r2
 80013c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80013d0:	f7ff f906 	bl	80005e0 <HAL_GetTick>
 80013d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80013d8:	f7ff f902 	bl	80005e0 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e007      	b.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f6:	d1ef      	bne.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	42470070 	.word	0x42470070

0800140c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001410:	b0a1      	sub	sp, #132	; 0x84
 8001412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001428:	4ba0      	ldr	r3, [pc, #640]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b0c      	cmp	r3, #12
 8001432:	f200 8193 	bhi.w	800175c <HAL_RCC_GetSysClockFreq+0x350>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <HAL_RCC_GetSysClockFreq+0x30>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	08001471 	.word	0x08001471
 8001440:	0800175d 	.word	0x0800175d
 8001444:	0800175d 	.word	0x0800175d
 8001448:	0800175d 	.word	0x0800175d
 800144c:	08001477 	.word	0x08001477
 8001450:	0800175d 	.word	0x0800175d
 8001454:	0800175d 	.word	0x0800175d
 8001458:	0800175d 	.word	0x0800175d
 800145c:	0800147d 	.word	0x0800147d
 8001460:	0800175d 	.word	0x0800175d
 8001464:	0800175d 	.word	0x0800175d
 8001468:	0800175d 	.word	0x0800175d
 800146c:	080015f9 	.word	0x080015f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001472:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001474:	e175      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001476:	4b8f      	ldr	r3, [pc, #572]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8001478:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800147a:	e172      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800147c:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001484:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001486:	4b89      	ldr	r3, [pc, #548]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d056      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001492:	4b86      	ldr	r3, [pc, #536]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	099b      	lsrs	r3, r3, #6
 8001498:	f04f 0400 	mov.w	r4, #0
 800149c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	ea01 0103 	and.w	r1, r1, r3
 80014a8:	ea02 0204 	and.w	r2, r2, r4
 80014ac:	460b      	mov	r3, r1
 80014ae:	4614      	mov	r4, r2
 80014b0:	0160      	lsls	r0, r4, #5
 80014b2:	6678      	str	r0, [r7, #100]	; 0x64
 80014b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80014b6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80014ba:	6678      	str	r0, [r7, #100]	; 0x64
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	663b      	str	r3, [r7, #96]	; 0x60
 80014c0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80014c4:	1a5b      	subs	r3, r3, r1
 80014c6:	eb64 0402 	sbc.w	r4, r4, r2
 80014ca:	01a0      	lsls	r0, r4, #6
 80014cc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80014ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80014d0:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80014d4:	65f8      	str	r0, [r7, #92]	; 0x5c
 80014d6:	0198      	lsls	r0, r3, #6
 80014d8:	65b8      	str	r0, [r7, #88]	; 0x58
 80014da:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80014de:	1aed      	subs	r5, r5, r3
 80014e0:	eb66 0604 	sbc.w	r6, r6, r4
 80014e4:	4633      	mov	r3, r6
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	657b      	str	r3, [r7, #84]	; 0x54
 80014ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ec:	4628      	mov	r0, r5
 80014ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014f2:	657b      	str	r3, [r7, #84]	; 0x54
 80014f4:	462b      	mov	r3, r5
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
 80014fa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80014fe:	461d      	mov	r5, r3
 8001500:	4626      	mov	r6, r4
 8001502:	186b      	adds	r3, r5, r1
 8001504:	eb46 0402 	adc.w	r4, r6, r2
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	460b      	mov	r3, r1
 800150e:	025b      	lsls	r3, r3, #9
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001514:	4602      	mov	r2, r0
 8001516:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 800151a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800151c:	4603      	mov	r3, r0
 800151e:	025b      	lsls	r3, r3, #9
 8001520:	64bb      	str	r3, [r7, #72]	; 0x48
 8001522:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001526:	4618      	mov	r0, r3
 8001528:	4621      	mov	r1, r4
 800152a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800152c:	f04f 0400 	mov.w	r4, #0
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	f7fe fe66 	bl	8000204 <__aeabi_uldivmod>
 8001538:	4603      	mov	r3, r0
 800153a:	460c      	mov	r4, r1
 800153c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800153e:	e04d      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001540:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	f04f 0400 	mov.w	r4, #0
 800154a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	ea01 0103 	and.w	r1, r1, r3
 8001556:	ea02 0204 	and.w	r2, r2, r4
 800155a:	460b      	mov	r3, r1
 800155c:	4614      	mov	r4, r2
 800155e:	0160      	lsls	r0, r4, #5
 8001560:	6478      	str	r0, [r7, #68]	; 0x44
 8001562:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001564:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001568:	6478      	str	r0, [r7, #68]	; 0x44
 800156a:	015b      	lsls	r3, r3, #5
 800156c:	643b      	str	r3, [r7, #64]	; 0x40
 800156e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001572:	1a5b      	subs	r3, r3, r1
 8001574:	eb64 0402 	sbc.w	r4, r4, r2
 8001578:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 800157c:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001580:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001584:	ebba 0a03 	subs.w	sl, sl, r3
 8001588:	eb6b 0b04 	sbc.w	fp, fp, r4
 800158c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800159a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
 80015a0:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80015a4:	eb1a 0a01 	adds.w	sl, sl, r1
 80015a8:	eb4b 0b02 	adc.w	fp, fp, r2
 80015ac:	ea4f 238b 	mov.w	r3, fp, lsl #10
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
 80015b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b4:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
 80015ba:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
 80015c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80015c4:	4650      	mov	r0, sl
 80015c6:	4659      	mov	r1, fp
 80015c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ca:	f04f 0400 	mov.w	r4, #0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4623      	mov	r3, r4
 80015d2:	f7fe fe17 	bl	8000204 <__aeabi_uldivmod>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0c1b      	lsrs	r3, r3, #16
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	3301      	adds	r3, #1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 80015ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f4:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80015f6:	e0b4      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001600:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d054      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	099b      	lsrs	r3, r3, #6
 8001614:	f04f 0400 	mov.w	r4, #0
 8001618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	ea01 0103 	and.w	r1, r1, r3
 8001624:	ea02 0204 	and.w	r2, r2, r4
 8001628:	460b      	mov	r3, r1
 800162a:	4614      	mov	r4, r2
 800162c:	0160      	lsls	r0, r4, #5
 800162e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001632:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001636:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
 800163c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001640:	1a5b      	subs	r3, r3, r1
 8001642:	eb64 0402 	sbc.w	r4, r4, r2
 8001646:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800164a:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800164e:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001652:	ebb8 0803 	subs.w	r8, r8, r3
 8001656:	eb69 0904 	sbc.w	r9, r9, r4
 800165a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
 8001668:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001672:	eb18 0801 	adds.w	r8, r8, r1
 8001676:	eb49 0902 	adc.w	r9, r9, r2
 800167a:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001692:	4640      	mov	r0, r8
 8001694:	4649      	mov	r1, r9
 8001696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001698:	f04f 0400 	mov.w	r4, #0
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	f7fe fdb0 	bl	8000204 <__aeabi_uldivmod>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016aa:	e04b      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x338>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_GetSysClockFreq+0x364>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	f04f 0400 	mov.w	r4, #0
 80016c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	ea01 0103 	and.w	r1, r1, r3
 80016ce:	ea02 0204 	and.w	r2, r2, r4
 80016d2:	460b      	mov	r3, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	0160      	lsls	r0, r4, #5
 80016d8:	6178      	str	r0, [r7, #20]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80016e0:	6178      	str	r0, [r7, #20]
 80016e2:	015b      	lsls	r3, r3, #5
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016ea:	1a5b      	subs	r3, r3, r1
 80016ec:	eb64 0402 	sbc.w	r4, r4, r2
 80016f0:	01a6      	lsls	r6, r4, #6
 80016f2:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80016f6:	019d      	lsls	r5, r3, #6
 80016f8:	1aed      	subs	r5, r5, r3
 80016fa:	eb66 0604 	sbc.w	r6, r6, r4
 80016fe:	00f3      	lsls	r3, r6, #3
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	00eb      	lsls	r3, r5, #3
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001712:	186d      	adds	r5, r5, r1
 8001714:	eb46 0602 	adc.w	r6, r6, r2
 8001718:	02b3      	lsls	r3, r6, #10
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	02ab      	lsls	r3, r5, #10
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	e897 0060 	ldmia.w	r7, {r5, r6}
 800172c:	4628      	mov	r0, r5
 800172e:	4631      	mov	r1, r6
 8001730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001732:	f04f 0400 	mov.w	r4, #0
 8001736:	461a      	mov	r2, r3
 8001738:	4623      	mov	r3, r4
 800173a:	f7fe fd63 	bl	8000204 <__aeabi_uldivmod>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_GetSysClockFreq+0x364>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0f1b      	lsrs	r3, r3, #28
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001750:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800175a:	e002      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetSysClockFreq+0x368>)
 800175e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001764:	4618      	mov	r0, r3
 8001766:	3784      	adds	r7, #132	; 0x84
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	00f42400 	.word	0x00f42400

08001778 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8083 	beq.w	8001898 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001792:	4b95      	ldr	r3, [pc, #596]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b04      	cmp	r3, #4
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800179e:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017aa:	4b8f      	ldr	r3, [pc, #572]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b6:	d00c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b8:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d112      	bne.n	80017ea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d05b      	beq.n	8001896 <HAL_RCC_OscConfig+0x11e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d157      	bne.n	8001896 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e216      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x8a>
 80017f4:	4a7c      	ldr	r2, [pc, #496]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017f6:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e01d      	b.n	800183e <HAL_RCC_OscConfig+0xc6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0xae>
 800180c:	4a76      	ldr	r2, [pc, #472]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800180e:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4a73      	ldr	r2, [pc, #460]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800181a:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0xc6>
 8001826:	4a70      	ldr	r2, [pc, #448]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001828:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4a6d      	ldr	r2, [pc, #436]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001834:	4b6c      	ldr	r3, [pc, #432]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d013      	beq.n	800186e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7fe fecb 	bl	80005e0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184e:	f7fe fec7 	bl	80005e0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1db      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0xd6>
 800186c:	e014      	b.n	8001898 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7fe feb7 	bl	80005e0 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001876:	f7fe feb3 	bl	80005e0 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1c7      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0xfe>
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d06f      	beq.n	8001984 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c8:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d11c      	bne.n	800190e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d116      	bne.n	800190e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x180>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e18f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	493b      	ldr	r1, [pc, #236]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190c:	e03a      	b.n	8001984 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d020      	beq.n	8001958 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001916:	4b35      	ldr	r3, [pc, #212]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7fe fe60 	bl	80005e0 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001924:	f7fe fe5c 	bl	80005e0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e170      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	4929      	ldr	r1, [pc, #164]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
 8001956:	e015      	b.n	8001984 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7fe fe3f 	bl	80005e0 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001966:	f7fe fe3b 	bl	80005e0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e14f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d037      	beq.n	8001a00 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d016      	beq.n	80019c6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_OscConfig+0x278>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7fe fe1f 	bl	80005e0 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a6:	f7fe fe1b 	bl	80005e0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e12f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x270>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x22e>
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_RCC_OscConfig+0x278>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7fe fe08 	bl	80005e0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7fe fe04 	bl	80005e0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d908      	bls.n	80019f4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e118      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	42470000 	.word	0x42470000
 80019f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	4b8a      	ldr	r3, [pc, #552]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 80019f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e9      	bne.n	80019d4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8097 	beq.w	8001b3c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4a7f      	ldr	r2, [pc, #508]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a24:	4b7e      	ldr	r3, [pc, #504]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d118      	bne.n	8001a7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4a:	4a76      	ldr	r2, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a56:	f7fe fdc3 	bl	80005e0 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7fe fdbf 	bl	80005e0 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0d3      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x31a>
 8001a84:	4a66      	ldr	r2, [pc, #408]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a86:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a90:	e01c      	b.n	8001acc <HAL_RCC_OscConfig+0x354>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x33c>
 8001a9a:	4a61      	ldr	r2, [pc, #388]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a9c:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	4a5e      	ldr	r2, [pc, #376]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0x354>
 8001ab4:	4a5a      	ldr	r2, [pc, #360]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001ac2:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	f023 0304 	bic.w	r3, r3, #4
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d015      	beq.n	8001b00 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7fe fd84 	bl	80005e0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7fe fd80 	bl	80005e0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e092      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ee      	beq.n	8001adc <HAL_RCC_OscConfig+0x364>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7fe fd6e 	bl	80005e0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7fe fd6a 	bl	80005e0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e07c      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ee      	bne.n	8001b08 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b32:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d068      	beq.n	8001c16 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d060      	beq.n	8001c12 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d145      	bne.n	8001be4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fd3f 	bl	80005e0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fd3b 	bl	80005e0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e04f      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4926      	ldr	r1, [pc, #152]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	019b      	lsls	r3, r3, #6
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	071b      	lsls	r3, r3, #28
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fd10 	bl	80005e0 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7fe fd0c 	bl	80005e0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e020      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x44c>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7fe fcf9 	bl	80005e0 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe fcf5 	bl	80005e0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e009      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x4a8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x47a>
 8001c10:	e001      	b.n	8001c16 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40007000 	.word	0x40007000
 8001c28:	42470060 	.word	0x42470060

08001c2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e01d      	b.n	8001c7a <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f004 fd29 	bl	80066a8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f810 	bl	8001c84 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b08e      	sub	sp, #56	; 0x38
 8001c88:	af04      	add	r7, sp, #16
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001ca4:	2376      	movs	r3, #118	; 0x76
 8001ca6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681d      	ldr	r5, [r3, #0]
 8001cac:	466c      	mov	r4, sp
 8001cae:	f107 0318 	add.w	r3, r7, #24
 8001cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f001 f9a7 	bl	8003014 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_SD_InitCard+0xb4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 f9e8 	bl	80030a6 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_SD_InitCard+0xb4>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7fe fc8b 	bl	80005f8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fe6c 	bl	80029c0 <SD_PowerON>
 8001ce8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e013      	b.n	8001d30 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fd90 	bl	800282e <SD_InitCard>
 8001d0e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bdb0      	pop	{r4, r5, r7, pc}
 8001d38:	422580a0 	.word	0x422580a0

08001d3c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b08f      	sub	sp, #60	; 0x3c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8001d4e:	f7fe fc47 	bl	80005e0 <HAL_GetTick>
 8001d52:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e176      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	f040 8169 	bne.w	8002052 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	441a      	add	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d907      	bls.n	8001da4 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e15d      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2203      	movs	r2, #3
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2200      	movs	r2, #0
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d002      	beq.n	8001dc2 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	025b      	lsls	r3, r3, #9
 8001dc0:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 f9ff 	bl	80031ce <SDMMC_CmdBlockLength>
 8001dd0:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e132      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e06:	2390      	movs	r3, #144	; 0x90
 8001e08:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e12:	2301      	movs	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 f9a8 	bl	8003176 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d90a      	bls.n	8001e42 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fa10 	bl	800325e <SDMMC_CmdReadMultiBlock>
 8001e3e:	6378      	str	r0, [r7, #52]	; 0x34
 8001e40:	e009      	b.n	8001e56 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 f9e1 	bl	8003216 <SDMMC_CmdReadSingleBlock>
 8001e54:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d04a      	beq.n	8001ef2 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0f0      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d016      	beq.n	8001eba <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e90:	e00d      	b.n	8001eae <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e98:	18d4      	adds	r4, r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 f8e3 	bl	800306a <SDIO_ReadFIFO>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eaa:	3301      	adds	r3, #1
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	2b07      	cmp	r3, #7
 8001eb2:	d9ee      	bls.n	8001e92 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_SD_ReadBlocks+0x194>
 8001ec0:	f7fe fb8e 	bl	80005e0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	1ad2      	subs	r2, r2, r3
 8001eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d310      	bcc.n	8001ef2 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0b6      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0be      	beq.n	8001e7e <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_SD_ReadBlocks+0x214>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d91d      	bls.n	8001f50 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d019      	beq.n	8001f50 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 fa09 	bl	8003338 <SDMMC_CmdStopTransfer>
 8001f26:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e087      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d010      	beq.n	8001f80 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	f043 0208 	orr.w	r2, r3, #8
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e06f      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	f043 0202 	orr.w	r2, r3, #2
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e057      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d037      	beq.n	800202e <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e03f      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 f840 	bl	800306a <SDIO_ReadFIFO>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_SD_ReadBlocks+0x2d0>
 8001ffc:	f7fe faf0 	bl	80005e0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002008:	429a      	cmp	r2, r3
 800200a:	d310      	bcc.n	800202e <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e018      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1d1      	bne.n	8001fe0 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e006      	b.n	8002060 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
  }
}
 8002060:	4618      	mov	r0, r3
 8002062:	373c      	adds	r7, #60	; 0x3c
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}

08002068 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	; 0x38
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800207a:	f7fe fab1 	bl	80005e0 <HAL_GetTick>
 800207e:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d107      	bne.n	800209e <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e147      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 813a 	bne.w	8002320 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	441a      	add	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	429a      	cmp	r2, r3
 80020be:	d907      	bls.n	80020d0 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e12e      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2203      	movs	r2, #3
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d002      	beq.n	80020ee <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	025b      	lsls	r3, r3, #9
 80020ec:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 f869 	bl	80031ce <SDMMC_CmdBlockLength>
 80020fc:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80020fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	431a      	orrs	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e103      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d90a      	bls.n	8002142 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	f001 f8d8 	bl	80032ee <SDMMC_CmdWriteMultiBlock>
 800213e:	6378      	str	r0, [r7, #52]	; 0x34
 8002140:	e009      	b.n	8002156 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2210      	movs	r2, #16
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	f001 f8a9 	bl	80032a6 <SDMMC_CmdWriteSingleBlock>
 8002154:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	431a      	orrs	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0d7      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	025b      	lsls	r3, r3, #9
 8002188:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800218a:	2390      	movs	r3, #144	; 0x90
 800218c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002196:	2301      	movs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f107 0210 	add.w	r2, r7, #16
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ffe6 	bl	8003176 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80021aa:	e037      	b.n	800221c <HAL_SD_WriteBlocks+0x1b4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d014      	beq.n	80021e4 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
 80021be:	e00b      	b.n	80021d8 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ca:	4413      	add	r3, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f000 ff59 	bl	8003084 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	3301      	adds	r3, #1
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	2b07      	cmp	r3, #7
 80021dc:	d9f0      	bls.n	80021c0 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	3320      	adds	r3, #32
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80021e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_SD_WriteBlocks+0x192>
 80021ea:	f7fe f9f9 	bl	80005e0 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d310      	bcc.n	800221c <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	431a      	orrs	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e088      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0c0      	beq.n	80021ac <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_SD_WriteBlocks+0x212>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d91d      	bls.n	800227a <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	2b03      	cmp	r3, #3
 8002244:	d019      	beq.n	800227a <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f001 f874 	bl	8003338 <SDMMC_CmdStopTransfer>
 8002250:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e059      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	f043 0208 	orr.w	r2, r3, #8
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e041      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d010      	beq.n	80022da <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	f043 0202 	orr.w	r2, r3, #2
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e029      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	f043 0210 	orr.w	r2, r3, #16
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e011      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e006      	b.n	800232e <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002336:	b490      	push	{r4, r7}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002348:	0e1b      	lsrs	r3, r3, #24
 800234a:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	099b      	lsrs	r3, r3, #6
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	b2da      	uxtb	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	b2da      	uxtb	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	b2da      	uxtb	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237e:	0c1b      	lsrs	r3, r3, #16
 8002380:	b2db      	uxtb	r3, r3
 8002382:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b2db      	uxtb	r3, r3
 8002394:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	b29a      	uxth	r2, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	88db      	ldrh	r3, [r3, #6]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	09db      	lsrs	r3, r3, #7
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	b2da      	uxtb	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 8086 	bne.w	800255a <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800245e:	b2db      	uxtb	r3, r3
 8002460:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	431a      	orrs	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	b2db      	uxtb	r3, r3
 8002478:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	431a      	orrs	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	b2da      	uxtb	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 0306 	and.w	r3, r3, #6
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	7e1b      	ldrb	r3, [r3, #24]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	09db      	lsrs	r3, r3, #7
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b2da      	uxtb	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7e1b      	ldrb	r3, [r3, #24]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3302      	adds	r3, #2
 800251c:	2201      	movs	r2, #1
 800251e:	409a      	lsls	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	fb02 f203 	mul.w	r2, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	7a1b      	ldrb	r3, [r3, #8]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	2301      	movs	r3, #1
 8002536:	fa03 f202 	lsl.w	r2, r3, r2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002546:	0a52      	lsrs	r2, r2, #9
 8002548:	fb02 f203 	mul.w	r2, r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002556:	661a      	str	r2, [r3, #96]	; 0x60
 8002558:	e051      	b.n	80025fe <HAL_SD_GetCardCSD+0x2c8>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	2b01      	cmp	r3, #1
 8002560:	d13c      	bne.n	80025dc <HAL_SD_GetCardCSD+0x2a6>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002566:	b2db      	uxtb	r3, r3
 8002568:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	0e1b      	lsrs	r3, r3, #24
 800257c:	b2db      	uxtb	r3, r3
 800257e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	431a      	orrs	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	b2db      	uxtb	r3, r3
 8002596:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	431a      	orrs	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f04f 0400 	mov.w	r4, #0
 80025b6:	3301      	adds	r3, #1
 80025b8:	f144 0400 	adc.w	r4, r4, #0
 80025bc:	029a      	lsls	r2, r3, #10
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d0:	659a      	str	r2, [r3, #88]	; 0x58
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	661a      	str	r2, [r3, #96]	; 0x60
 80025da:	e010      	b.n	80025fe <HAL_SD_GetCardCSD+0x2c8>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0c1      	b.n	8002782 <HAL_SD_GetCardCSD+0x44c>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800261a:	b2da      	uxtb	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002624:	b2db      	uxtb	r3, r3
 8002626:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	7e9b      	ldrb	r3, [r3, #26]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	09db      	lsrs	r3, r3, #7
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	b2da      	uxtb	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800264a:	b2da      	uxtb	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	0e1b      	lsrs	r3, r3, #24
 8002656:	b2db      	uxtb	r3, r3
 8002658:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	09db      	lsrs	r3, r3, #7
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	b2da      	uxtb	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	b2da      	uxtb	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	b2da      	uxtb	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	b2da      	uxtb	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7fdb      	ldrb	r3, [r3, #31]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	09db      	lsrs	r3, r3, #7
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	b2da      	uxtb	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	b2db      	uxtb	r3, r3
 8002764:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002770:	b2da      	uxtb	r2, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bc90      	pop	{r4, r7}
 800278a:	4770      	bx	lr

0800278c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80027ec:	2304      	movs	r3, #4
 80027ee:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f986 	bl	8002b10 <SD_SendStatus>
 8002804:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0a5b      	lsrs	r3, r3, #9
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8002824:	7dfb      	ldrb	r3, [r7, #23]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800282e:	b5b0      	push	{r4, r5, r7, lr}
 8002830:	b094      	sub	sp, #80	; 0x50
 8002832:	af04      	add	r7, sp, #16
 8002834:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002836:	2300      	movs	r3, #0
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800283a:	2301      	movs	r3, #1
 800283c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fc3d 	bl	80030c2 <SDIO_GetPowerState>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800284e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002852:	e0b1      	b.n	80029b8 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	2b03      	cmp	r3, #3
 800285a:	d02f      	beq.n	80028bc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fe3c 	bl	80034de <SDMMC_CmdSendCID>
 8002866:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <SD_InitCard+0x44>
    {
      return errorstate;
 800286e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002870:	e0a2      	b.n	80029b8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fc67 	bl	800314c <SDIO_GetResponse>
 800287e:	4602      	mov	r2, r0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2104      	movs	r1, #4
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fc5e 	bl	800314c <SDIO_GetResponse>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2108      	movs	r1, #8
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fc55 	bl	800314c <SDIO_GetResponse>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	210c      	movs	r1, #12
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fc4c 	bl	800314c <SDIO_GetResponse>
 80028b4:	4602      	mov	r2, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d00d      	beq.n	80028e0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f107 020e 	add.w	r2, r7, #14
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fe46 	bl	8003560 <SDMMC_CmdSetRelAdd>
 80028d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80028d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <SD_InitCard+0xb2>
    {
      return errorstate;
 80028dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028de:	e06b      	b.n	80029b8 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d036      	beq.n	8002956 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	461a      	mov	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f000 fe0e 	bl	800351e <SDMMC_CmdSendCSD>
 8002902:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <SD_InitCard+0xe0>
    {
      return errorstate;
 800290a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290c:	e054      	b.n	80029b8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fc19 	bl	800314c <SDIO_GetResponse>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2104      	movs	r1, #4
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fc10 	bl	800314c <SDIO_GetResponse>
 800292c:	4602      	mov	r2, r0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2108      	movs	r1, #8
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fc07 	bl	800314c <SDIO_GetResponse>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	210c      	movs	r1, #12
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fbfe 	bl	800314c <SDIO_GetResponse>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2104      	movs	r1, #4
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fbf5 	bl	800314c <SDIO_GetResponse>
 8002962:	4603      	mov	r3, r0
 8002964:	0d1a      	lsrs	r2, r3, #20
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800296a:	f107 0310 	add.w	r3, r7, #16
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fce0 	bl	8002336 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	4608      	mov	r0, r1
 800298a:	f000 fcf9 	bl	8003380 <SDMMC_CmdSelDesel>
 800298e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <SD_InitCard+0x16c>
  {
    return errorstate;
 8002996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002998:	e00e      	b.n	80029b8 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681d      	ldr	r5, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	466c      	mov	r4, sp
 80029a2:	f103 0210 	add.w	r2, r3, #16
 80029a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80029a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029ac:	3304      	adds	r3, #4
 80029ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b0:	4628      	mov	r0, r5
 80029b2:	f000 fb2f 	bl	8003014 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3740      	adds	r7, #64	; 0x40
 80029bc:	46bd      	mov	sp, r7
 80029be:	bdb0      	pop	{r4, r5, r7, pc}

080029c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fcf4 	bl	80033ca <SDMMC_CmdGoIdleState>
 80029e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SD_PowerON+0x2e>
  {
    return errorstate;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	e08c      	b.n	8002b08 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fd09 	bl	800340a <SDMMC_CmdOperCond>
 80029f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03d      	beq.n	8002a7c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002a06:	e032      	b.n	8002a6e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	60ba      	str	r2, [r7, #8]
 8002a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d102      	bne.n	8002a1c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a1a:	e075      	b.n	8002b08 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fd12 	bl	800344c <SDMMC_CmdAppCommand>
 8002a28:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a34:	e068      	b.n	8002b08 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fd29 	bl	8003494 <SDMMC_CmdAppOperCommand>
 8002a42:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a4e:	e05b      	b.n	8002b08 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fb78 	bl	800314c <SDIO_GetResponse>
 8002a5c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	0fdb      	lsrs	r3, r3, #31
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <SD_PowerON+0xaa>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <SD_PowerON+0xac>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0c9      	beq.n	8002a08 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
 8002a7a:	e044      	b.n	8002b06 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002a82:	e031      	b.n	8002ae8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	60ba      	str	r2, [r7, #8]
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d102      	bne.n	8002a98 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a96:	e037      	b.n	8002b08 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fcd4 	bl	800344c <SDMMC_CmdAppCommand>
 8002aa4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <SD_PowerON+0xf0>
      {
        return errorstate;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	e02b      	b.n	8002b08 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fceb 	bl	8003494 <SDMMC_CmdAppOperCommand>
 8002abe:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <SD_PowerON+0x10a>
      {
        return errorstate;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	e01e      	b.n	8002b08 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fb3b 	bl	800314c <SDIO_GetResponse>
 8002ad6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	0fdb      	lsrs	r3, r3, #31
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <SD_PowerON+0x124>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <SD_PowerON+0x126>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0ca      	beq.n	8002a84 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
 8002afe:	e002      	b.n	8002b06 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8002b24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b28:	e018      	b.n	8002b5c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f000 fd35 	bl	80035a6 <SDMMC_CmdSendStatus>
 8002b3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <SD_SendStatus+0x38>
  {
    return errorstate;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	e009      	b.n	8002b5c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fafc 	bl	800314c <SDIO_GetResponse>
 8002b54:	4602      	mov	r2, r0
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e03f      	b.n	8002bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f003 fe14 	bl	80067b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f829 	bl	8002c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	6912      	ldr	r2, [r2, #16]
 8002bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	6952      	ldr	r2, [r2, #20]
 8002bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	68d2      	ldr	r2, [r2, #12]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	6912      	ldr	r2, [r2, #16]
 8002c12:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c44:	f023 030c 	bic.w	r3, r3, #12
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	6952      	ldr	r2, [r2, #20]
 8002c58:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6992      	ldr	r2, [r2, #24]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6c:	f040 80e4 	bne.w	8002e38 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4aab      	ldr	r2, [pc, #684]	; (8002f24 <UART_SetConfig+0x324>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <UART_SetConfig+0x84>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4aaa      	ldr	r2, [pc, #680]	; (8002f28 <UART_SetConfig+0x328>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d16c      	bne.n	8002d5e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681c      	ldr	r4, [r3, #0]
 8002c88:	f7fe f882 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	009a      	lsls	r2, r3, #2
 8002c96:	441a      	add	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	4aa2      	ldr	r2, [pc, #648]	; (8002f2c <UART_SetConfig+0x32c>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	011d      	lsls	r5, r3, #4
 8002cac:	f7fe f870 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009a      	lsls	r2, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cc6:	f7fe f863 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	4a92      	ldr	r2, [pc, #584]	; (8002f2c <UART_SetConfig+0x32c>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2264      	movs	r2, #100	; 0x64
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	1af3      	subs	r3, r6, r3
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	3332      	adds	r3, #50	; 0x32
 8002cf4:	4a8d      	ldr	r2, [pc, #564]	; (8002f2c <UART_SetConfig+0x32c>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d02:	441d      	add	r5, r3
 8002d04:	f7fe f844 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	009a      	lsls	r2, r3, #2
 8002d12:	441a      	add	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d1e:	f7fe f837 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009a      	lsls	r2, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	4a7c      	ldr	r2, [pc, #496]	; (8002f2c <UART_SetConfig+0x32c>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2264      	movs	r2, #100	; 0x64
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	1af3      	subs	r3, r6, r3
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	3332      	adds	r3, #50	; 0x32
 8002d4c:	4a77      	ldr	r2, [pc, #476]	; (8002f2c <UART_SetConfig+0x32c>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	442b      	add	r3, r5
 8002d5a:	60a3      	str	r3, [r4, #8]
 8002d5c:	e154      	b.n	8003008 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681c      	ldr	r4, [r3, #0]
 8002d62:	f7fe f801 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009a      	lsls	r2, r3, #2
 8002d70:	441a      	add	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	4a6b      	ldr	r2, [pc, #428]	; (8002f2c <UART_SetConfig+0x32c>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	011d      	lsls	r5, r3, #4
 8002d86:	f7fd ffef 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009a      	lsls	r2, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002da0:	f7fd ffe2 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	441a      	add	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4a5c      	ldr	r2, [pc, #368]	; (8002f2c <UART_SetConfig+0x32c>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	2264      	movs	r2, #100	; 0x64
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	1af3      	subs	r3, r6, r3
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	3332      	adds	r3, #50	; 0x32
 8002dce:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <UART_SetConfig+0x32c>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ddc:	441d      	add	r5, r3
 8002dde:	f7fd ffc3 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002df8:	f7fd ffb6 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009a      	lsls	r2, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4a46      	ldr	r2, [pc, #280]	; (8002f2c <UART_SetConfig+0x32c>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	2264      	movs	r2, #100	; 0x64
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	1af3      	subs	r3, r6, r3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	3332      	adds	r3, #50	; 0x32
 8002e26:	4a41      	ldr	r2, [pc, #260]	; (8002f2c <UART_SetConfig+0x32c>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	442b      	add	r3, r5
 8002e34:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e36:	e0e7      	b.n	8003008 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a39      	ldr	r2, [pc, #228]	; (8002f24 <UART_SetConfig+0x324>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <UART_SetConfig+0x24c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a38      	ldr	r2, [pc, #224]	; (8002f28 <UART_SetConfig+0x328>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d171      	bne.n	8002f30 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681c      	ldr	r4, [r3, #0]
 8002e50:	f7fd ff9e 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009a      	lsls	r2, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <UART_SetConfig+0x32c>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	011d      	lsls	r5, r3, #4
 8002e74:	f7fd ff8c 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	009a      	lsls	r2, r3, #2
 8002e82:	441a      	add	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e8e:	f7fd ff7f 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <UART_SetConfig+0x32c>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2264      	movs	r2, #100	; 0x64
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	1af3      	subs	r3, r6, r3
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	3332      	adds	r3, #50	; 0x32
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <UART_SetConfig+0x32c>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec8:	441d      	add	r5, r3
 8002eca:	f7fd ff61 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009a      	lsls	r2, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ee4:	f7fd ff54 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009a      	lsls	r2, r3, #2
 8002ef2:	441a      	add	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <UART_SetConfig+0x32c>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2264      	movs	r2, #100	; 0x64
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	1af3      	subs	r3, r6, r3
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	3332      	adds	r3, #50	; 0x32
 8002f12:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <UART_SetConfig+0x32c>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	442b      	add	r3, r5
 8002f20:	60a3      	str	r3, [r4, #8]
 8002f22:	e071      	b.n	8003008 <UART_SetConfig+0x408>
 8002f24:	40011000 	.word	0x40011000
 8002f28:	40011400 	.word	0x40011400
 8002f2c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681c      	ldr	r4, [r3, #0]
 8002f34:	f7fd ff18 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4a30      	ldr	r2, [pc, #192]	; (8003010 <UART_SetConfig+0x410>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	011d      	lsls	r5, r3, #4
 8002f58:	f7fd ff06 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009a      	lsls	r2, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f72:	f7fd fef9 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009a      	lsls	r2, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <UART_SetConfig+0x410>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2264      	movs	r2, #100	; 0x64
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	1af3      	subs	r3, r6, r3
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	3332      	adds	r3, #50	; 0x32
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <UART_SetConfig+0x410>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fac:	441d      	add	r5, r3
 8002fae:	f7fd fedb 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009a      	lsls	r2, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fc8:	f7fd fece 	bl	8000d68 <HAL_RCC_GetPCLK1Freq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009a      	lsls	r2, r3, #2
 8002fd6:	441a      	add	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <UART_SetConfig+0x410>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2264      	movs	r2, #100	; 0x64
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	1af3      	subs	r3, r6, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a06      	ldr	r2, [pc, #24]	; (8003010 <UART_SetConfig+0x410>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	442b      	add	r3, r5
 8003004:	60a3      	str	r3, [r4, #8]
}
 8003006:	e7ff      	b.n	8003008 <UART_SetConfig+0x408>
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003010:	51eb851f 	.word	0x51eb851f

08003014 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003014:	b084      	sub	sp, #16
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	f107 001c 	add.w	r0, r7, #28
 8003022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800302a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800302c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800302e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003032:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003036:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800303a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800303e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800304e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	b004      	add	sp, #16
 8003068:	4770      	bx	lr

0800306a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0303 	and.w	r3, r3, #3
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80030fc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003102:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003108:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003118:	f023 030f 	bic.w	r3, r3, #15
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	b2db      	uxtb	r3, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3314      	adds	r3, #20
 800315e:	461a      	mov	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4413      	add	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
}  
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800319c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80031a2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80031a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0

}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b088      	sub	sp, #32
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80031e0:	2310      	movs	r3, #16
 80031e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031e4:	2340      	movs	r3, #64	; 0x40
 80031e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff70 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	2110      	movs	r1, #16
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fa1d 	bl	8003644 <SDMMC_GetCmdResp1>
 800320a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800320c:	69fb      	ldr	r3, [r7, #28]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b088      	sub	sp, #32
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003228:	2311      	movs	r3, #17
 800322a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800322c:	2340      	movs	r3, #64	; 0x40
 800322e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003238:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800323a:	f107 0308 	add.w	r3, r7, #8
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff4c 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	2111      	movs	r1, #17
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f9f9 	bl	8003644 <SDMMC_GetCmdResp1>
 8003252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003254:	69fb      	ldr	r3, [r7, #28]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b088      	sub	sp, #32
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003270:	2312      	movs	r3, #18
 8003272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003274:	2340      	movs	r3, #64	; 0x40
 8003276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800327c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003280:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff28 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	2112      	movs	r1, #18
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f9d5 	bl	8003644 <SDMMC_GetCmdResp1>
 800329a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800329c:	69fb      	ldr	r3, [r7, #28]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b088      	sub	sp, #32
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80032b8:	2318      	movs	r3, #24
 80032ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff04 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	2118      	movs	r1, #24
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f9b1 	bl	8003644 <SDMMC_GetCmdResp1>
 80032e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032e4:	69fb      	ldr	r3, [r7, #28]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b088      	sub	sp, #32
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003300:	2319      	movs	r3, #25
 8003302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800330c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003310:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fee0 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	2119      	movs	r1, #25
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f98d 	bl	8003644 <SDMMC_GetCmdResp1>
 800332a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800332c:	69fb      	ldr	r3, [r7, #28]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003348:	230c      	movs	r3, #12
 800334a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003358:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800335a:	f107 0308 	add.w	r3, r7, #8
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff febc 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <SDMMC_CmdStopTransfer+0x44>)
 8003368:	210c      	movs	r1, #12
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f96a 	bl	8003644 <SDMMC_GetCmdResp1>
 8003370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003372:	69fb      	ldr	r3, [r7, #28]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	05f5e100 	.word	0x05f5e100

08003380 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003394:	2307      	movs	r3, #7
 8003396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003398:	2340      	movs	r3, #64	; 0x40
 800339a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a4:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	4619      	mov	r1, r3
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff fe96 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	2107      	movs	r1, #7
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f943 	bl	8003644 <SDMMC_GetCmdResp1>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3728      	adds	r7, #40	; 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b088      	sub	sp, #32
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fe73 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f8f9 	bl	80035f0 <SDMMC_GetCmdError>
 80033fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003400:	69fb      	ldr	r3, [r7, #28]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b088      	sub	sp, #32
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003416:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800341a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800341c:	2308      	movs	r3, #8
 800341e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003420:	2340      	movs	r3, #64	; 0x40
 8003422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800342e:	f107 0308 	add.w	r3, r7, #8
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff fe52 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 faca 	bl	80039d4 <SDMMC_GetCmdResp7>
 8003440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003442:	69fb      	ldr	r3, [r7, #28]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800345e:	2337      	movs	r3, #55	; 0x37
 8003460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800346a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fe31 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	2137      	movs	r1, #55	; 0x37
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8de 	bl	8003644 <SDMMC_GetCmdResp1>
 8003488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800348a:	69fb      	ldr	r3, [r7, #28]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80034ae:	2329      	movs	r3, #41	; 0x29
 80034b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034b2:	2340      	movs	r3, #64	; 0x40
 80034b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034be:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034c0:	f107 0308 	add.w	r3, r7, #8
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fe09 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f9df 	bl	8003890 <SDMMC_GetCmdResp3>
 80034d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034d4:	69fb      	ldr	r3, [r7, #28]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b088      	sub	sp, #32
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80034ee:	2302      	movs	r3, #2
 80034f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80034f2:	23c0      	movs	r3, #192	; 0xc0
 80034f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034fe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003500:	f107 0308 	add.w	r3, r7, #8
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fde9 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f97f 	bl	8003810 <SDMMC_GetCmdResp2>
 8003512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003514:	69fb      	ldr	r3, [r7, #28]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b088      	sub	sp, #32
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003530:	2309      	movs	r3, #9
 8003532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003534:	23c0      	movs	r3, #192	; 0xc0
 8003536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800353c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003540:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff fdc8 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f95e 	bl	8003810 <SDMMC_GetCmdResp2>
 8003554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003556:	69fb      	ldr	r3, [r7, #28]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003572:	2303      	movs	r3, #3
 8003574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800357e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003582:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fda7 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	2103      	movs	r1, #3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f9af 	bl	80038f8 <SDMMC_GetCmdResp6>
 800359a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800359c:	69fb      	ldr	r3, [r7, #28]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80035b8:	230d      	movs	r3, #13
 80035ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035bc:	2340      	movs	r3, #64	; 0x40
 80035be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fd84 	bl	80030de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	210d      	movs	r1, #13
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f831 	bl	8003644 <SDMMC_GetCmdResp1>
 80035e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035e4:	69fb      	ldr	r3, [r7, #28]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80035f0:	b490      	push	{r4, r7}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <SDMMC_GetCmdError+0x4c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a10      	ldr	r2, [pc, #64]	; (8003640 <SDMMC_GetCmdError+0x50>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0a5b      	lsrs	r3, r3, #9
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800360c:	4623      	mov	r3, r4
 800360e:	1e5c      	subs	r4, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003618:	e00a      	b.n	8003630 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f2      	beq.n	800360c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bc90      	pop	{r4, r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000008 	.word	0x20000008
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	460b      	mov	r3, r1
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003652:	4b6c      	ldr	r3, [pc, #432]	; (8003804 <SDMMC_GetCmdResp1+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6c      	ldr	r2, [pc, #432]	; (8003808 <SDMMC_GetCmdResp1+0x1c4>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	0a5b      	lsrs	r3, r3, #9
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003664:	4623      	mov	r3, r4
 8003666:	1e5c      	subs	r4, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800366c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003670:	e0c3      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f2      	beq.n	8003664 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2204      	movs	r2, #4
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003690:	2304      	movs	r3, #4
 8003692:	e0b2      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d004      	beq.n	80036aa <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0a7      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff fd41 	bl	8003132 <SDIO_GetCommandResponse>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	7afb      	ldrb	r3, [r7, #11]
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d001      	beq.n	80036be <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e09d      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80036c6:	2100      	movs	r1, #0
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff fd3f 	bl	800314c <SDIO_GetResponse>
 80036ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4b4e      	ldr	r3, [pc, #312]	; (800380c <SDMMC_GetCmdResp1+0x1c8>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80036da:	2300      	movs	r3, #0
 80036dc:	e08d      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	da02      	bge.n	80036ea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80036e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e8:	e087      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80036f4:	2340      	movs	r3, #64	; 0x40
 80036f6:	e080      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	e079      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003714:	e071      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003724:	e069      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003734:	e061      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003744:	e059      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003754:	e051      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003764:	e049      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003774:	e041      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8003780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003784:	e039      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003794:	e031      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80037a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037a4:	e029      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80037b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037b4:	e021      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80037c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037c4:	e019      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80037d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037d4:	e011      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80037e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037e4:	e009      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80037f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80037f4:	e001      	b.n	80037fa <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80037f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
 8003802:	bf00      	nop
 8003804:	20000008 	.word	0x20000008
 8003808:	10624dd3 	.word	0x10624dd3
 800380c:	fdffe008 	.word	0xfdffe008

08003810 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003810:	b490      	push	{r4, r7}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <SDMMC_GetCmdResp2+0x78>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <SDMMC_GetCmdResp2+0x7c>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0a5b      	lsrs	r3, r3, #9
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800382c:	4623      	mov	r3, r4
 800382e:	1e5c      	subs	r4, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003834:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003838:	e020      	b.n	800387c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f2      	beq.n	800382c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2204      	movs	r2, #4
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003858:	2304      	movs	r3, #4
 800385a:	e00f      	b.n	800387c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800386e:	2301      	movs	r3, #1
 8003870:	e004      	b.n	800387c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bc90      	pop	{r4, r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000008 	.word	0x20000008
 800388c:	10624dd3 	.word	0x10624dd3

08003890 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003890:	b490      	push	{r4, r7}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <SDMMC_GetCmdResp3+0x60>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <SDMMC_GetCmdResp3+0x64>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0a5b      	lsrs	r3, r3, #9
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80038ac:	4623      	mov	r3, r4
 80038ae:	1e5c      	subs	r4, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80038b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038b8:	e015      	b.n	80038e6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f2      	beq.n	80038ac <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80038d8:	2304      	movs	r3, #4
 80038da:	e004      	b.n	80038e6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc90      	pop	{r4, r7}
 80038ee:	4770      	bx	lr
 80038f0:	20000008 	.word	0x20000008
 80038f4:	10624dd3 	.word	0x10624dd3

080038f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	460b      	mov	r3, r1
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <SDMMC_GetCmdResp6+0xd4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <SDMMC_GetCmdResp6+0xd8>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	0a5b      	lsrs	r3, r3, #9
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800391a:	4623      	mov	r3, r4
 800391c:	1e5c      	subs	r4, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003926:	e04c      	b.n	80039c2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f2      	beq.n	800391a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2204      	movs	r2, #4
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003946:	2304      	movs	r3, #4
 8003948:	e03b      	b.n	80039c2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800395c:	2301      	movs	r3, #1
 800395e:	e030      	b.n	80039c2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff fbe6 	bl	8003132 <SDIO_GetCommandResponse>
 8003966:	4603      	mov	r3, r0
 8003968:	461a      	mov	r2, r3
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	4293      	cmp	r3, r2
 800396e:	d001      	beq.n	8003974 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003970:	2301      	movs	r3, #1
 8003972:	e026      	b.n	80039c2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800397c:	2100      	movs	r1, #0
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff fbe4 	bl	800314c <SDIO_GetResponse>
 8003984:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	0c1b      	lsrs	r3, r3, #16
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800399a:	2300      	movs	r3, #0
 800399c:	e011      	b.n	80039c2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80039a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ac:	e009      	b.n	80039c2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80039b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039bc:	e001      	b.n	80039c2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80039be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000008 	.word	0x20000008
 80039d0:	10624dd3 	.word	0x10624dd3

080039d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80039d4:	b490      	push	{r4, r7}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <SDMMC_GetCmdResp7+0x6c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <SDMMC_GetCmdResp7+0x70>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80039f0:	4623      	mov	r3, r4
 80039f2:	1e5c      	subs	r4, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80039f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039fc:	e01a      	b.n	8003a34 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f2      	beq.n	80039f0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e009      	b.n	8003a34 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003a32:	2300      	movs	r3, #0
  
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc90      	pop	{r4, r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000008 	.word	0x20000008
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <disk_status+0x30>)
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	79fa      	ldrb	r2, [r7, #7]
 8003a60:	4905      	ldr	r1, [pc, #20]	; (8003a78 <disk_status+0x30>)
 8003a62:	440a      	add	r2, r1
 8003a64:	7a12      	ldrb	r2, [r2, #8]
 8003a66:	4610      	mov	r0, r2
 8003a68:	4798      	blx	r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000050 	.word	0x20000050

08003a7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <disk_initialize+0x48>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <disk_initialize+0x48>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <disk_initialize+0x48>)
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	79fa      	ldrb	r2, [r7, #7]
 8003aaa:	4906      	ldr	r1, [pc, #24]	; (8003ac4 <disk_initialize+0x48>)
 8003aac:	440a      	add	r2, r1
 8003aae:	7a12      	ldrb	r2, [r2, #8]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4798      	blx	r3
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000050 	.word	0x20000050

08003ac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <disk_read+0x3c>)
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	689c      	ldr	r4, [r3, #8]
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <disk_read+0x3c>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	7a18      	ldrb	r0, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	47a0      	blx	r4
 8003af4:	4603      	mov	r3, r0
 8003af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000050 	.word	0x20000050

08003b08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <disk_write+0x3c>)
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68dc      	ldr	r4, [r3, #12]
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <disk_write+0x3c>)
 8003b28:	4413      	add	r3, r2
 8003b2a:	7a18      	ldrb	r0, [r3, #8]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	47a0      	blx	r4
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000050 	.word	0x20000050

08003b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	603a      	str	r2, [r7, #0]
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	460b      	mov	r3, r1
 8003b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <disk_ioctl+0x38>)
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	79fa      	ldrb	r2, [r7, #7]
 8003b66:	4906      	ldr	r1, [pc, #24]	; (8003b80 <disk_ioctl+0x38>)
 8003b68:	440a      	add	r2, r1
 8003b6a:	7a10      	ldrb	r0, [r2, #8]
 8003b6c:	79b9      	ldrb	r1, [r7, #6]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4798      	blx	r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
  return res;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000050 	.word	0x20000050

08003b84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003b94:	89fb      	ldrh	r3, [r7, #14]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	b21a      	sxth	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b21b      	sxth	r3, r3
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	b21b      	sxth	r3, r3
 8003ba4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3303      	adds	r3, #3
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	3202      	adds	r2, #2
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	3201      	adds	r2, #1
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	7812      	ldrb	r2, [r2, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
	return rv;
 8003bec:	68fb      	ldr	r3, [r7, #12]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	887b      	ldrh	r3, [r7, #2]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	617a      	str	r2, [r7, #20]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	1c51      	adds	r1, r2, #1
 8003cac:	6139      	str	r1, [r7, #16]
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f1      	bne.n	8003ca2 <mem_cpy+0x1a>
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003cca:	b480      	push	{r7}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	617a      	str	r2, [r7, #20]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f3      	bne.n	8003cda <mem_set+0x10>
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003cfe:	b480      	push	{r7}
 8003d00:	b089      	sub	sp, #36	; 0x24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	61fa      	str	r2, [r7, #28]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	61ba      	str	r2, [r7, #24]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	1acb      	subs	r3, r1, r3
 8003d2a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <mem_cmp+0x40>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0eb      	beq.n	8003d16 <mem_cmp+0x18>

	return r;
 8003d3e:	697b      	ldr	r3, [r7, #20]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3724      	adds	r7, #36	; 0x24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003d56:	e002      	b.n	8003d5e <chk_chr+0x12>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <chk_chr+0x26>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d1f2      	bne.n	8003d58 <chk_chr+0xc>
	return *str;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	781b      	ldrb	r3, [r3, #0]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e029      	b.n	8003dec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <chk_lock+0xb4>)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4413      	add	r3, r2
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d01d      	beq.n	8003de2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003da6:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <chk_lock+0xb4>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	4413      	add	r3, r2
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d116      	bne.n	8003de6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <chk_lock+0xb4>)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d10c      	bne.n	8003de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003dcc:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <chk_lock+0xb4>)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d102      	bne.n	8003de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003de0:	e007      	b.n	8003df2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3301      	adds	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d9d2      	bls.n	8003d98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d109      	bne.n	8003e0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <chk_lock+0x80>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d101      	bne.n	8003e08 <chk_lock+0x84>
 8003e04:	2300      	movs	r3, #0
 8003e06:	e010      	b.n	8003e2a <chk_lock+0xa6>
 8003e08:	2312      	movs	r3, #18
 8003e0a:	e00e      	b.n	8003e2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d108      	bne.n	8003e24 <chk_lock+0xa0>
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <chk_lock+0xb4>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	4413      	add	r3, r2
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e22:	d101      	bne.n	8003e28 <chk_lock+0xa4>
 8003e24:	2310      	movs	r3, #16
 8003e26:	e000      	b.n	8003e2a <chk_lock+0xa6>
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000030 	.word	0x20000030

08003e3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	e002      	b.n	8003e4e <enq_lock+0x12>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d806      	bhi.n	8003e62 <enq_lock+0x26>
 8003e54:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <enq_lock+0x40>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	4413      	add	r3, r2
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f2      	bne.n	8003e48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000030 	.word	0x20000030

08003e80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e01f      	b.n	8003ed0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003e90:	4a41      	ldr	r2, [pc, #260]	; (8003f98 <inc_lock+0x118>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	4413      	add	r3, r2
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d113      	bne.n	8003eca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003ea2:	4a3d      	ldr	r2, [pc, #244]	; (8003f98 <inc_lock+0x118>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d109      	bne.n	8003eca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003eb6:	4a38      	ldr	r2, [pc, #224]	; (8003f98 <inc_lock+0x118>)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d006      	beq.n	8003ed8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d9dc      	bls.n	8003e90 <inc_lock+0x10>
 8003ed6:	e000      	b.n	8003eda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003ed8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d132      	bne.n	8003f46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e002      	b.n	8003eec <inc_lock+0x6c>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d806      	bhi.n	8003f00 <inc_lock+0x80>
 8003ef2:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <inc_lock+0x118>)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	4413      	add	r3, r2
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f2      	bne.n	8003ee6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d101      	bne.n	8003f0a <inc_lock+0x8a>
 8003f06:	2300      	movs	r3, #0
 8003f08:	e040      	b.n	8003f8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4922      	ldr	r1, [pc, #136]	; (8003f98 <inc_lock+0x118>)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	440b      	add	r3, r1
 8003f16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	491e      	ldr	r1, [pc, #120]	; (8003f98 <inc_lock+0x118>)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	440b      	add	r3, r1
 8003f24:	3304      	adds	r3, #4
 8003f26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	491a      	ldr	r1, [pc, #104]	; (8003f98 <inc_lock+0x118>)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	440b      	add	r3, r1
 8003f34:	3308      	adds	r3, #8
 8003f36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <inc_lock+0x118>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	4413      	add	r3, r2
 8003f40:	330c      	adds	r3, #12
 8003f42:	2200      	movs	r2, #0
 8003f44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <inc_lock+0xe0>
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <inc_lock+0x118>)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	4413      	add	r3, r2
 8003f54:	330c      	adds	r3, #12
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <inc_lock+0xe0>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e015      	b.n	8003f8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <inc_lock+0xf8>
 8003f66:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <inc_lock+0x118>)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	4413      	add	r3, r2
 8003f6e:	330c      	adds	r3, #12
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	e001      	b.n	8003f7c <inc_lock+0xfc>
 8003f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7c:	4906      	ldr	r1, [pc, #24]	; (8003f98 <inc_lock+0x118>)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	440b      	add	r3, r1
 8003f84:	330c      	adds	r3, #12
 8003f86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3301      	adds	r3, #1
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20000030 	.word	0x20000030

08003f9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d825      	bhi.n	8003ffc <dec_lock+0x60>
		n = Files[i].ctr;
 8003fb0:	4a17      	ldr	r2, [pc, #92]	; (8004010 <dec_lock+0x74>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4413      	add	r3, r2
 8003fb8:	330c      	adds	r3, #12
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003fbe:	89fb      	ldrh	r3, [r7, #14]
 8003fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc4:	d101      	bne.n	8003fca <dec_lock+0x2e>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <dec_lock+0x3a>
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <dec_lock+0x74>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	4413      	add	r3, r2
 8003fde:	330c      	adds	r3, #12
 8003fe0:	89fa      	ldrh	r2, [r7, #14]
 8003fe2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <dec_lock+0x5a>
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <dec_lock+0x74>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	4413      	add	r3, r2
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	737b      	strb	r3, [r7, #13]
 8003ffa:	e001      	b.n	8004000 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004000:	7b7b      	ldrb	r3, [r7, #13]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000030 	.word	0x20000030

08004014 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	e010      	b.n	8004044 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004022:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <clear_lock+0x44>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	4413      	add	r3, r2
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d105      	bne.n	800403e <clear_lock+0x2a>
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <clear_lock+0x44>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4413      	add	r3, r2
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d9eb      	bls.n	8004022 <clear_lock+0xe>
	}
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000030 	.word	0x20000030

0800405c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	78db      	ldrb	r3, [r3, #3]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d034      	beq.n	80040da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7858      	ldrb	r0, [r3, #1]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004080:	2301      	movs	r3, #1
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	f7ff fd40 	bl	8003b08 <disk_write>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <sync_window+0x38>
			res = FR_DISK_ERR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
 8004092:	e022      	b.n	80040da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	1ad2      	subs	r2, r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d217      	bcs.n	80040da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	789b      	ldrb	r3, [r3, #2]
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e010      	b.n	80040d4 <sync_window+0x78>
					wsect += fs->fsize;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4413      	add	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7858      	ldrb	r0, [r3, #1]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80040c6:	2301      	movs	r3, #1
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	f7ff fd1d 	bl	8003b08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d8eb      	bhi.n	80040b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d01b      	beq.n	8004134 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff ffad 	bl	800405c <sync_window>
 8004102:	4603      	mov	r3, r0
 8004104:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d113      	bne.n	8004134 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7858      	ldrb	r0, [r3, #1]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004116:	2301      	movs	r3, #1
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	f7ff fcd5 	bl	8003ac8 <disk_read>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff87 	bl	800405c <sync_window>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d159      	bne.n	800420c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d149      	bne.n	80041f4 <sync_fs+0xb4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	791b      	ldrb	r3, [r3, #4]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d145      	bne.n	80041f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	899b      	ldrh	r3, [r3, #12]
 8004172:	461a      	mov	r2, r3
 8004174:	2100      	movs	r1, #0
 8004176:	f7ff fda8 	bl	8003cca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3334      	adds	r3, #52	; 0x34
 800417e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004182:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fd37 	bl	8003bfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3334      	adds	r3, #52	; 0x34
 8004190:	4921      	ldr	r1, [pc, #132]	; (8004218 <sync_fs+0xd8>)
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fd4c 	bl	8003c30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3334      	adds	r3, #52	; 0x34
 800419c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80041a0:	491e      	ldr	r1, [pc, #120]	; (800421c <sync_fs+0xdc>)
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fd44 	bl	8003c30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3334      	adds	r3, #52	; 0x34
 80041ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7ff fd3a 	bl	8003c30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3334      	adds	r3, #52	; 0x34
 80041c0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f7ff fd30 	bl	8003c30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	7858      	ldrb	r0, [r3, #1]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e8:	2301      	movs	r3, #1
 80041ea:	f7ff fc8d 	bl	8003b08 <disk_write>
			fs->fsi_flag = 0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fca3 	bl	8003b48 <disk_ioctl>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <sync_fs+0xcc>
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	41615252 	.word	0x41615252
 800421c:	61417272 	.word	0x61417272

08004220 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	3b02      	subs	r3, #2
 800422e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	1e9a      	subs	r2, r3, #2
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d801      	bhi.n	8004240 <clust2sect+0x20>
 800423c:	2300      	movs	r3, #0
 800423e:	e008      	b.n	8004252 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	895b      	ldrh	r3, [r3, #10]
 8004244:	461a      	mov	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	fb03 f202 	mul.w	r2, r3, r2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4413      	add	r3, r2
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d904      	bls.n	800427e <get_fat+0x20>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d802      	bhi.n	8004284 <get_fat+0x26>
		val = 1;	/* Internal error */
 800427e:	2301      	movs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e0b7      	b.n	80043f4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d05a      	beq.n	8004348 <get_fat+0xea>
 8004292:	2b03      	cmp	r3, #3
 8004294:	d07d      	beq.n	8004392 <get_fat+0x134>
 8004296:	2b01      	cmp	r3, #1
 8004298:	f040 80a2 	bne.w	80043e0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	899b      	ldrh	r3, [r3, #12]
 80042b2:	4619      	mov	r1, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ba:	4413      	add	r3, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	6938      	ldr	r0, [r7, #16]
 80042c0:	f7ff ff10 	bl	80040e4 <move_window>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 808d 	bne.w	80043e6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	60fa      	str	r2, [r7, #12]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	8992      	ldrh	r2, [r2, #12]
 80042d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80042da:	fb02 f201 	mul.w	r2, r2, r1
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	899b      	ldrh	r3, [r3, #12]
 80042f2:	4619      	mov	r1, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042fa:	4413      	add	r3, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	6938      	ldr	r0, [r7, #16]
 8004300:	f7ff fef0 	bl	80040e4 <move_window>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d16f      	bne.n	80043ea <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	899b      	ldrh	r3, [r3, #12]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	fbb3 f1f2 	udiv	r1, r3, r2
 8004316:	fb02 f201 	mul.w	r2, r2, r1
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	461a      	mov	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <get_fat+0xe0>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	e002      	b.n	8004344 <get_fat+0xe6>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004344:	617b      	str	r3, [r7, #20]
			break;
 8004346:	e055      	b.n	80043f4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	899b      	ldrh	r3, [r3, #12]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	4619      	mov	r1, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	fbb3 f3f1 	udiv	r3, r3, r1
 800435c:	4413      	add	r3, r2
 800435e:	4619      	mov	r1, r3
 8004360:	6938      	ldr	r0, [r7, #16]
 8004362:	f7ff febf 	bl	80040e4 <move_window>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d140      	bne.n	80043ee <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	8992      	ldrh	r2, [r2, #12]
 800437a:	fbb3 f0f2 	udiv	r0, r3, r2
 800437e:	fb02 f200 	mul.w	r2, r2, r0
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	440b      	add	r3, r1
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fbfc 	bl	8003b84 <ld_word>
 800438c:	4603      	mov	r3, r0
 800438e:	617b      	str	r3, [r7, #20]
			break;
 8004390:	e030      	b.n	80043f4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	899b      	ldrh	r3, [r3, #12]
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	b29b      	uxth	r3, r3
 800439e:	4619      	mov	r1, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043a6:	4413      	add	r3, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	6938      	ldr	r0, [r7, #16]
 80043ac:	f7ff fe9a 	bl	80040e4 <move_window>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11d      	bne.n	80043f2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	8992      	ldrh	r2, [r2, #12]
 80043c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80043c8:	fb02 f200 	mul.w	r2, r2, r0
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	440b      	add	r3, r1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fbef 	bl	8003bb4 <ld_dword>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043dc:	617b      	str	r3, [r7, #20]
			break;
 80043de:	e009      	b.n	80043f4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80043e0:	2301      	movs	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	e006      	b.n	80043f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043e6:	bf00      	nop
 80043e8:	e004      	b.n	80043f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80043f2:	bf00      	nop
		}
	}

	return val;
 80043f4:	697b      	ldr	r3, [r7, #20]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80043fe:	b590      	push	{r4, r7, lr}
 8004400:	b089      	sub	sp, #36	; 0x24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800440a:	2302      	movs	r3, #2
 800440c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b01      	cmp	r3, #1
 8004412:	f240 8106 	bls.w	8004622 <put_fat+0x224>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	f240 8100 	bls.w	8004622 <put_fat+0x224>
		switch (fs->fs_type) {
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b02      	cmp	r3, #2
 8004428:	f000 8088 	beq.w	800453c <put_fat+0x13e>
 800442c:	2b03      	cmp	r3, #3
 800442e:	f000 80b0 	beq.w	8004592 <put_fat+0x194>
 8004432:	2b01      	cmp	r3, #1
 8004434:	f040 80f5 	bne.w	8004622 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4413      	add	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	899b      	ldrh	r3, [r3, #12]
 800444e:	4619      	mov	r1, r3
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	fbb3 f3f1 	udiv	r3, r3, r1
 8004456:	4413      	add	r3, r2
 8004458:	4619      	mov	r1, r3
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7ff fe42 	bl	80040e4 <move_window>
 8004460:	4603      	mov	r3, r0
 8004462:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004464:	7ffb      	ldrb	r3, [r7, #31]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f040 80d4 	bne.w	8004614 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	61ba      	str	r2, [r7, #24]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	8992      	ldrh	r2, [r2, #12]
 800447c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004480:	fb02 f200 	mul.w	r2, r2, r0
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	440b      	add	r3, r1
 8004488:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00d      	beq.n	80044b0 <put_fat+0xb2>
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b25b      	sxtb	r3, r3
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	b25a      	sxtb	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	b25b      	sxtb	r3, r3
 80044a8:	4313      	orrs	r3, r2
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e001      	b.n	80044b4 <put_fat+0xb6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	899b      	ldrh	r3, [r3, #12]
 80044c6:	4619      	mov	r1, r3
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ce:	4413      	add	r3, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fe06 	bl	80040e4 <move_window>
 80044d8:	4603      	mov	r3, r0
 80044da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044dc:	7ffb      	ldrb	r3, [r7, #31]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 809a 	bne.w	8004618 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	899b      	ldrh	r3, [r3, #12]
 80044ee:	461a      	mov	r2, r3
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80044f6:	fb02 f200 	mul.w	r2, r2, r0
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	440b      	add	r3, r1
 80044fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <put_fat+0x114>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	b2db      	uxtb	r3, r3
 8004510:	e00e      	b.n	8004530 <put_fat+0x132>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b25b      	sxtb	r3, r3
 8004518:	f023 030f 	bic.w	r3, r3, #15
 800451c:	b25a      	sxtb	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	b25b      	sxtb	r3, r3
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	b25b      	sxtb	r3, r3
 800452a:	4313      	orrs	r3, r2
 800452c:	b25b      	sxtb	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	70da      	strb	r2, [r3, #3]
			break;
 800453a:	e072      	b.n	8004622 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	899b      	ldrh	r3, [r3, #12]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	b29b      	uxth	r3, r3
 8004548:	4619      	mov	r1, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004550:	4413      	add	r3, r2
 8004552:	4619      	mov	r1, r3
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff fdc5 	bl	80040e4 <move_window>
 800455a:	4603      	mov	r3, r0
 800455c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800455e:	7ffb      	ldrb	r3, [r7, #31]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d15b      	bne.n	800461c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	8992      	ldrh	r2, [r2, #12]
 8004572:	fbb3 f0f2 	udiv	r0, r3, r2
 8004576:	fb02 f200 	mul.w	r2, r2, r0
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	440b      	add	r3, r1
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	b292      	uxth	r2, r2
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fb38 	bl	8003bfa <st_word>
			fs->wflag = 1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	70da      	strb	r2, [r3, #3]
			break;
 8004590:	e047      	b.n	8004622 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	899b      	ldrh	r3, [r3, #12]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	b29b      	uxth	r3, r3
 800459e:	4619      	mov	r1, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a6:	4413      	add	r3, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f7ff fd9a 	bl	80040e4 <move_window>
 80045b0:	4603      	mov	r3, r0
 80045b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045b4:	7ffb      	ldrb	r3, [r7, #31]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d132      	bne.n	8004620 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	8992      	ldrh	r2, [r2, #12]
 80045ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80045d2:	fb02 f200 	mul.w	r2, r2, r0
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	440b      	add	r3, r1
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff faea 	bl	8003bb4 <ld_dword>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045e6:	4323      	orrs	r3, r4
 80045e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	8992      	ldrh	r2, [r2, #12]
 80045f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80045fc:	fb02 f200 	mul.w	r2, r2, r0
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	440b      	add	r3, r1
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fb12 	bl	8003c30 <st_dword>
			fs->wflag = 1;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	70da      	strb	r2, [r3, #3]
			break;
 8004612:	e006      	b.n	8004622 <put_fat+0x224>
			if (res != FR_OK) break;
 8004614:	bf00      	nop
 8004616:	e004      	b.n	8004622 <put_fat+0x224>
			if (res != FR_OK) break;
 8004618:	bf00      	nop
 800461a:	e002      	b.n	8004622 <put_fat+0x224>
			if (res != FR_OK) break;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <put_fat+0x224>
			if (res != FR_OK) break;
 8004620:	bf00      	nop
		}
	}
	return res;
 8004622:	7ffb      	ldrb	r3, [r7, #31]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3724      	adds	r7, #36	; 0x24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd90      	pop	{r4, r7, pc}

0800462c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d904      	bls.n	8004652 <remove_chain+0x26>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	d801      	bhi.n	8004656 <remove_chain+0x2a>
 8004652:	2302      	movs	r3, #2
 8004654:	e04b      	b.n	80046ee <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800465c:	f04f 32ff 	mov.w	r2, #4294967295
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	69b8      	ldr	r0, [r7, #24]
 8004664:	f7ff fecb 	bl	80043fe <put_fat>
 8004668:	4603      	mov	r3, r0
 800466a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800466c:	7ffb      	ldrb	r3, [r7, #31]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <remove_chain+0x4a>
 8004672:	7ffb      	ldrb	r3, [r7, #31]
 8004674:	e03b      	b.n	80046ee <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff fdf0 	bl	800425e <get_fat>
 800467e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d031      	beq.n	80046ea <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <remove_chain+0x64>
 800468c:	2302      	movs	r3, #2
 800468e:	e02e      	b.n	80046ee <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d101      	bne.n	800469c <remove_chain+0x70>
 8004698:	2301      	movs	r3, #1
 800469a:	e028      	b.n	80046ee <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800469c:	2200      	movs	r2, #0
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	69b8      	ldr	r0, [r7, #24]
 80046a2:	f7ff feac 	bl	80043fe <put_fat>
 80046a6:	4603      	mov	r3, r0
 80046a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <remove_chain+0x88>
 80046b0:	7ffb      	ldrb	r3, [r7, #31]
 80046b2:	e01c      	b.n	80046ee <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	3b02      	subs	r3, #2
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20b      	bcs.n	80046da <remove_chain+0xae>
			fs->free_clst++;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d8c6      	bhi.n	8004676 <remove_chain+0x4a>
 80046e8:	e000      	b.n	80046ec <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80046ea:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b088      	sub	sp, #32
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10d      	bne.n	8004728 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <create_chain+0x2c>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	429a      	cmp	r2, r3
 8004720:	d81b      	bhi.n	800475a <create_chain+0x64>
 8004722:	2301      	movs	r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e018      	b.n	800475a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fd97 	bl	800425e <get_fat>
 8004730:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d801      	bhi.n	800473c <create_chain+0x46>
 8004738:	2301      	movs	r3, #1
 800473a:	e070      	b.n	800481e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d101      	bne.n	8004748 <create_chain+0x52>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	e06a      	b.n	800481e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	429a      	cmp	r2, r3
 8004750:	d901      	bls.n	8004756 <create_chain+0x60>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	e063      	b.n	800481e <create_chain+0x128>
		scl = clst;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3301      	adds	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	429a      	cmp	r2, r3
 800476c:	d807      	bhi.n	800477e <create_chain+0x88>
				ncl = 2;
 800476e:	2302      	movs	r3, #2
 8004770:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	429a      	cmp	r2, r3
 8004778:	d901      	bls.n	800477e <create_chain+0x88>
 800477a:	2300      	movs	r3, #0
 800477c:	e04f      	b.n	800481e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800477e:	69f9      	ldr	r1, [r7, #28]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fd6c 	bl	800425e <get_fat>
 8004786:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00e      	beq.n	80047ac <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d003      	beq.n	800479c <create_chain+0xa6>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d101      	bne.n	80047a0 <create_chain+0xaa>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	e03e      	b.n	800481e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1da      	bne.n	800475e <create_chain+0x68>
 80047a8:	2300      	movs	r3, #0
 80047aa:	e038      	b.n	800481e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80047ac:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80047ae:	f04f 32ff 	mov.w	r2, #4294967295
 80047b2:	69f9      	ldr	r1, [r7, #28]
 80047b4:	6938      	ldr	r0, [r7, #16]
 80047b6:	f7ff fe22 	bl	80043fe <put_fat>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <create_chain+0xe2>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d006      	beq.n	80047d8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	6938      	ldr	r0, [r7, #16]
 80047d0:	f7ff fe15 	bl	80043fe <put_fat>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <create_chain+0x116>
		fs->last_clst = ncl;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	3b02      	subs	r3, #2
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d804      	bhi.n	80047fc <create_chain+0x106>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	791b      	ldrb	r3, [r3, #4]
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	b2da      	uxtb	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	711a      	strb	r2, [r3, #4]
 800480a:	e007      	b.n	800481c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <create_chain+0x122>
 8004812:	f04f 33ff 	mov.w	r3, #4294967295
 8004816:	e000      	b.n	800481a <create_chain+0x124>
 8004818:	2301      	movs	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800481c:	69fb      	ldr	r3, [r7, #28]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004826:	b480      	push	{r7}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	3304      	adds	r3, #4
 800483c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	899b      	ldrh	r3, [r3, #12]
 8004842:	461a      	mov	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	fbb3 f3f2 	udiv	r3, r3, r2
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	8952      	ldrh	r2, [r2, #10]
 800484e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004852:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	613a      	str	r2, [r7, #16]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <clmt_clust+0x42>
 8004864:	2300      	movs	r3, #0
 8004866:	e010      	b.n	800488a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	d307      	bcc.n	8004880 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3304      	adds	r3, #4
 800487c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800487e:	e7e9      	b.n	8004854 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004880:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	4413      	add	r3, r2
}
 800488a:	4618      	mov	r0, r3
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ac:	d204      	bcs.n	80048b8 <dir_sdi+0x22>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <dir_sdi+0x26>
		return FR_INT_ERR;
 80048b8:	2302      	movs	r3, #2
 80048ba:	e071      	b.n	80049a0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <dir_sdi+0x46>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d902      	bls.n	80048dc <dir_sdi+0x46>
		clst = fs->dirbase;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	8912      	ldrh	r2, [r2, #8]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d301      	bcc.n	80048f2 <dir_sdi+0x5c>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e056      	b.n	80049a0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	61da      	str	r2, [r3, #28]
 80048fa:	e02d      	b.n	8004958 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	895b      	ldrh	r3, [r3, #10]
 8004900:	461a      	mov	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	899b      	ldrh	r3, [r3, #12]
 8004906:	fb03 f302 	mul.w	r3, r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800490c:	e019      	b.n	8004942 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6979      	ldr	r1, [r7, #20]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fca3 	bl	800425e <get_fat>
 8004918:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d101      	bne.n	8004926 <dir_sdi+0x90>
 8004922:	2301      	movs	r3, #1
 8004924:	e03c      	b.n	80049a0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d904      	bls.n	8004936 <dir_sdi+0xa0>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	429a      	cmp	r2, r3
 8004934:	d801      	bhi.n	800493a <dir_sdi+0xa4>
 8004936:	2302      	movs	r3, #2
 8004938:	e032      	b.n	80049a0 <dir_sdi+0x10a>
			ofs -= csz;
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	d2e1      	bcs.n	800490e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800494a:	6979      	ldr	r1, [r7, #20]
 800494c:	6938      	ldr	r0, [r7, #16]
 800494e:	f7ff fc67 	bl	8004220 <clust2sect>
 8004952:	4602      	mov	r2, r0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <dir_sdi+0xd4>
 8004966:	2302      	movs	r3, #2
 8004968:	e01a      	b.n	80049a0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	899b      	ldrh	r3, [r3, #12]
 8004972:	4619      	mov	r1, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	fbb3 f3f1 	udiv	r3, r3, r1
 800497a:	441a      	add	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	899b      	ldrh	r3, [r3, #12]
 800498a:	461a      	mov	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004992:	fb02 f200 	mul.w	r2, r2, r0
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	18ca      	adds	r2, r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	3320      	adds	r3, #32
 80049be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <dir_next+0x28>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ce:	d301      	bcc.n	80049d4 <dir_next+0x2c>
 80049d0:	2304      	movs	r3, #4
 80049d2:	e0bb      	b.n	8004b4c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	899b      	ldrh	r3, [r3, #12]
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80049e0:	fb02 f201 	mul.w	r2, r2, r1
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 809d 	bne.w	8004b26 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	8912      	ldrh	r2, [r2, #8]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	f0c0 808d 	bcc.w	8004b26 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61da      	str	r2, [r3, #28]
 8004a12:	2304      	movs	r3, #4
 8004a14:	e09a      	b.n	8004b4c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	899b      	ldrh	r3, [r3, #12]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	8952      	ldrh	r2, [r2, #10]
 8004a26:	3a01      	subs	r2, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d17b      	bne.n	8004b26 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f7ff fc11 	bl	800425e <get_fat>
 8004a3c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d801      	bhi.n	8004a48 <dir_next+0xa0>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e081      	b.n	8004b4c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d101      	bne.n	8004a54 <dir_next+0xac>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e07b      	b.n	8004b4c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d859      	bhi.n	8004b12 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	e06e      	b.n	8004b4c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f7ff fe3d 	bl	80046f6 <create_chain>
 8004a7c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <dir_next+0xe0>
 8004a84:	2307      	movs	r3, #7
 8004a86:	e061      	b.n	8004b4c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <dir_next+0xea>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e05c      	b.n	8004b4c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d101      	bne.n	8004a9e <dir_next+0xf6>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e056      	b.n	8004b4c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff fadc 	bl	800405c <sync_window>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <dir_next+0x106>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e04e      	b.n	8004b4c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	899b      	ldrh	r3, [r3, #12]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2100      	movs	r1, #0
 8004abc:	f7ff f905 	bl	8003cca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	6979      	ldr	r1, [r7, #20]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff fbaa 	bl	8004220 <clust2sect>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ad2:	e012      	b.n	8004afa <dir_next+0x152>
						fs->wflag = 1;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff fabe 	bl	800405c <sync_window>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <dir_next+0x142>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e030      	b.n	8004b4c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3301      	adds	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	895b      	ldrh	r3, [r3, #10]
 8004afe:	461a      	mov	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d8e6      	bhi.n	8004ad4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fb80 	bl	8004220 <clust2sect>
 8004b20:	4602      	mov	r2, r0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	899b      	ldrh	r3, [r3, #12]
 8004b36:	461a      	mov	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b3e:	fb02 f200 	mul.w	r2, r2, r0
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	18ca      	adds	r2, r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004b64:	2100      	movs	r1, #0
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fe95 	bl	8004896 <dir_sdi>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d12b      	bne.n	8004bce <dir_alloc+0x7a>
		n = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff faaf 	bl	80040e4 <move_window>
 8004b86:	4603      	mov	r3, r0
 8004b88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d11d      	bne.n	8004bcc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2be5      	cmp	r3, #229	; 0xe5
 8004b98:	d004      	beq.n	8004ba4 <dir_alloc+0x50>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d107      	bne.n	8004bb4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d102      	bne.n	8004bb8 <dir_alloc+0x64>
 8004bb2:	e00c      	b.n	8004bce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004bb8:	2101      	movs	r1, #1
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fef4 	bl	80049a8 <dir_next>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0d7      	beq.n	8004b7a <dir_alloc+0x26>
 8004bca:	e000      	b.n	8004bce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004bcc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d101      	bne.n	8004bd8 <dir_alloc+0x84>
 8004bd4:	2307      	movs	r3, #7
 8004bd6:	75fb      	strb	r3, [r7, #23]
	return res;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	331a      	adds	r3, #26
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe ffc7 	bl	8003b84 <ld_word>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d109      	bne.n	8004c16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe ffbc 	bl	8003b84 <ld_word>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	331a      	adds	r3, #26
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	b292      	uxth	r2, r2
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe ffdf 	bl	8003bfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d109      	bne.n	8004c58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f103 0214 	add.w	r2, r3, #20
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f7fe ffd1 	bl	8003bfa <st_word>
	}
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004c6e:	2100      	movs	r1, #0
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff fe10 	bl	8004896 <dir_sdi>
 8004c76:	4603      	mov	r3, r0
 8004c78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <dir_find+0x24>
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	e03e      	b.n	8004d02 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f7ff fa2a 	bl	80040e4 <move_window>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d12f      	bne.n	8004cfa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <dir_find+0x4e>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	75fb      	strb	r3, [r7, #23]
 8004cac:	e028      	b.n	8004d00 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	330b      	adds	r3, #11
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	330b      	adds	r3, #11
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <dir_find+0x86>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a18      	ldr	r0, [r3, #32]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3324      	adds	r3, #36	; 0x24
 8004cd8:	220b      	movs	r2, #11
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f7ff f80f 	bl	8003cfe <mem_cmp>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fe5d 	bl	80049a8 <dir_next>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0c5      	beq.n	8004c84 <dir_find+0x24>
 8004cf8:	e002      	b.n	8004d00 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004cfe:	bf00      	nop

	return res;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004d18:	2101      	movs	r1, #1
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ff1a 	bl	8004b54 <dir_alloc>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d11c      	bne.n	8004d64 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f7ff f9d7 	bl	80040e4 <move_window>
 8004d36:	4603      	mov	r3, r0
 8004d38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d111      	bne.n	8004d64 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	2220      	movs	r2, #32
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe ffbe 	bl	8003cca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a18      	ldr	r0, [r3, #32]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	220b      	movs	r2, #11
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f7fe ff95 	bl	8003c88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2201      	movs	r2, #1
 8004d62:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3324      	adds	r3, #36	; 0x24
 8004d84:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004d86:	220b      	movs	r2, #11
 8004d88:	2120      	movs	r1, #32
 8004d8a:	68b8      	ldr	r0, [r7, #8]
 8004d8c:	f7fe ff9d 	bl	8003cca <mem_set>
	si = i = 0; ni = 8;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	2308      	movs	r3, #8
 8004d9a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	617a      	str	r2, [r7, #20]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004daa:	7ffb      	ldrb	r3, [r7, #31]
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d94e      	bls.n	8004e4e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004db0:	7ffb      	ldrb	r3, [r7, #31]
 8004db2:	2b2f      	cmp	r3, #47	; 0x2f
 8004db4:	d006      	beq.n	8004dc4 <create_name+0x54>
 8004db6:	7ffb      	ldrb	r3, [r7, #31]
 8004db8:	2b5c      	cmp	r3, #92	; 0x5c
 8004dba:	d110      	bne.n	8004dde <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004dbc:	e002      	b.n	8004dc4 <create_name+0x54>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8004dce:	d0f6      	beq.n	8004dbe <create_name+0x4e>
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b5c      	cmp	r3, #92	; 0x5c
 8004dda:	d0f0      	beq.n	8004dbe <create_name+0x4e>
			break;
 8004ddc:	e038      	b.n	8004e50 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
 8004de0:	2b2e      	cmp	r3, #46	; 0x2e
 8004de2:	d003      	beq.n	8004dec <create_name+0x7c>
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d30c      	bcc.n	8004e06 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b0b      	cmp	r3, #11
 8004df0:	d002      	beq.n	8004df8 <create_name+0x88>
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b2e      	cmp	r3, #46	; 0x2e
 8004df6:	d001      	beq.n	8004dfc <create_name+0x8c>
 8004df8:	2306      	movs	r3, #6
 8004dfa:	e044      	b.n	8004e86 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	230b      	movs	r3, #11
 8004e02:	61bb      	str	r3, [r7, #24]
			continue;
 8004e04:	e022      	b.n	8004e4c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004e06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	da04      	bge.n	8004e18 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004e0e:	7ffb      	ldrb	r3, [r7, #31]
 8004e10:	3b80      	subs	r3, #128	; 0x80
 8004e12:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <create_name+0x120>)
 8004e14:	5cd3      	ldrb	r3, [r2, r3]
 8004e16:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004e18:	7ffb      	ldrb	r3, [r7, #31]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	481d      	ldr	r0, [pc, #116]	; (8004e94 <create_name+0x124>)
 8004e1e:	f7fe ff95 	bl	8003d4c <chk_chr>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <create_name+0xbc>
 8004e28:	2306      	movs	r3, #6
 8004e2a:	e02c      	b.n	8004e86 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004e2c:	7ffb      	ldrb	r3, [r7, #31]
 8004e2e:	2b60      	cmp	r3, #96	; 0x60
 8004e30:	d905      	bls.n	8004e3e <create_name+0xce>
 8004e32:	7ffb      	ldrb	r3, [r7, #31]
 8004e34:	2b7a      	cmp	r3, #122	; 0x7a
 8004e36:	d802      	bhi.n	8004e3e <create_name+0xce>
 8004e38:	7ffb      	ldrb	r3, [r7, #31]
 8004e3a:	3b20      	subs	r3, #32
 8004e3c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	613a      	str	r2, [r7, #16]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4413      	add	r3, r2
 8004e48:	7ffa      	ldrb	r2, [r7, #31]
 8004e4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004e4c:	e7a6      	b.n	8004d9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004e4e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	441a      	add	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <create_name+0xf4>
 8004e60:	2306      	movs	r3, #6
 8004e62:	e010      	b.n	8004e86 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2be5      	cmp	r3, #229	; 0xe5
 8004e6a:	d102      	bne.n	8004e72 <create_name+0x102>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2205      	movs	r2, #5
 8004e70:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	330b      	adds	r3, #11
 8004e76:	7ffa      	ldrb	r2, [r7, #31]
 8004e78:	2a20      	cmp	r2, #32
 8004e7a:	d801      	bhi.n	8004e80 <create_name+0x110>
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	e000      	b.n	8004e82 <create_name+0x112>
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004e84:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	08006a44 	.word	0x08006a44
 8004e94:	080069d4 	.word	0x080069d4

08004e98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004eac:	e002      	b.n	8004eb4 <follow_path+0x1c>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b2f      	cmp	r3, #47	; 0x2f
 8004eba:	d0f8      	beq.n	8004eae <follow_path+0x16>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ec2:	d0f4      	beq.n	8004eae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b1f      	cmp	r3, #31
 8004ed0:	d80a      	bhi.n	8004ee8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2280      	movs	r2, #128	; 0x80
 8004ed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004eda:	2100      	movs	r1, #0
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fcda 	bl	8004896 <dir_sdi>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	75fb      	strb	r3, [r7, #23]
 8004ee6:	e048      	b.n	8004f7a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004ee8:	463b      	mov	r3, r7
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff3f 	bl	8004d70 <create_name>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d139      	bne.n	8004f70 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff feaf 	bl	8004c60 <dir_find>
 8004f02:	4603      	mov	r3, r0
 8004f04:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f0c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d12c      	bne.n	8004f74 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d127      	bne.n	8004f74 <follow_path+0xdc>
 8004f24:	2305      	movs	r3, #5
 8004f26:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004f28:	e024      	b.n	8004f74 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d121      	bne.n	8004f78 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	799b      	ldrb	r3, [r3, #6]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004f40:	2305      	movs	r3, #5
 8004f42:	75fb      	strb	r3, [r7, #23]
 8004f44:	e019      	b.n	8004f7a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	8992      	ldrh	r2, [r2, #12]
 8004f54:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f58:	fb02 f200 	mul.w	r2, r2, r0
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	440b      	add	r3, r1
 8004f60:	4619      	mov	r1, r3
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff fe3d 	bl	8004be2 <ld_clust>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f6e:	e7bb      	b.n	8004ee8 <follow_path+0x50>
			if (res != FR_OK) break;
 8004f70:	bf00      	nop
 8004f72:	e002      	b.n	8004f7a <follow_path+0xe2>
				break;
 8004f74:	bf00      	nop
 8004f76:	e000      	b.n	8004f7a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f78:	bf00      	nop
			}
		}
	}

	return res;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d031      	beq.n	8004ffe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	e002      	b.n	8004fa8 <get_ldnumber+0x24>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d903      	bls.n	8004fb8 <get_ldnumber+0x34>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b3a      	cmp	r3, #58	; 0x3a
 8004fb6:	d1f4      	bne.n	8004fa2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b3a      	cmp	r3, #58	; 0x3a
 8004fbe:	d11c      	bne.n	8004ffa <get_ldnumber+0x76>
			tp = *path;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	60fa      	str	r2, [r7, #12]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	3b30      	subs	r3, #48	; 0x30
 8004fd0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b09      	cmp	r3, #9
 8004fd6:	d80e      	bhi.n	8004ff6 <get_ldnumber+0x72>
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d10a      	bne.n	8004ff6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <get_ldnumber+0x72>
					vol = (int)i;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	3301      	adds	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	e002      	b.n	8005000 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004ffe:	693b      	ldr	r3, [r7, #16]
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	70da      	strb	r2, [r3, #3]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f04f 32ff 	mov.w	r2, #4294967295
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff f85c 	bl	80040e4 <move_window>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <check_fs+0x2a>
 8005032:	2304      	movs	r3, #4
 8005034:	e038      	b.n	80050a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3334      	adds	r3, #52	; 0x34
 800503a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fda0 	bl	8003b84 <ld_word>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <check_fs+0x48>
 8005050:	2303      	movs	r3, #3
 8005052:	e029      	b.n	80050a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800505a:	2be9      	cmp	r3, #233	; 0xe9
 800505c:	d009      	beq.n	8005072 <check_fs+0x66>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005064:	2beb      	cmp	r3, #235	; 0xeb
 8005066:	d11e      	bne.n	80050a6 <check_fs+0x9a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800506e:	2b90      	cmp	r3, #144	; 0x90
 8005070:	d119      	bne.n	80050a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3334      	adds	r3, #52	; 0x34
 8005076:	3336      	adds	r3, #54	; 0x36
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe fd9b 	bl	8003bb4 <ld_dword>
 800507e:	4603      	mov	r3, r0
 8005080:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <check_fs+0xa4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d101      	bne.n	800508e <check_fs+0x82>
 800508a:	2300      	movs	r3, #0
 800508c:	e00c      	b.n	80050a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3334      	adds	r3, #52	; 0x34
 8005092:	3352      	adds	r3, #82	; 0x52
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe fd8d 	bl	8003bb4 <ld_dword>
 800509a:	4602      	mov	r2, r0
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <check_fs+0xa8>)
 800509e:	429a      	cmp	r2, r3
 80050a0:	d101      	bne.n	80050a6 <check_fs+0x9a>
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80050a6:	2302      	movs	r3, #2
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	00544146 	.word	0x00544146
 80050b4:	33544146 	.word	0x33544146

080050b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b096      	sub	sp, #88	; 0x58
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff ff59 	bl	8004f84 <get_ldnumber>
 80050d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80050d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da01      	bge.n	80050de <find_volume+0x26>
 80050da:	230b      	movs	r3, #11
 80050dc:	e265      	b.n	80055aa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80050de:	4ab0      	ldr	r2, [pc, #704]	; (80053a0 <find_volume+0x2e8>)
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <find_volume+0x3a>
 80050ee:	230c      	movs	r3, #12
 80050f0:	e25b      	b.n	80055aa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe fc9b 	bl	8003a48 <disk_status>
 8005112:	4603      	mov	r3, r0
 8005114:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10c      	bne.n	800513e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <find_volume+0x82>
 800512a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005136:	230a      	movs	r3, #10
 8005138:	e237      	b.n	80055aa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800513a:	2300      	movs	r3, #0
 800513c:	e235      	b.n	80055aa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005146:	b2da      	uxtb	r2, r3
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe fc93 	bl	8003a7c <disk_initialize>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800515c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005168:	2303      	movs	r3, #3
 800516a:	e21e      	b.n	80055aa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <find_volume+0xca>
 8005172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800517e:	230a      	movs	r3, #10
 8005180:	e213      	b.n	80055aa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	7858      	ldrb	r0, [r3, #1]
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	330c      	adds	r3, #12
 800518a:	461a      	mov	r2, r3
 800518c:	2102      	movs	r1, #2
 800518e:	f7fe fcdb 	bl	8003b48 <disk_ioctl>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <find_volume+0xe4>
 8005198:	2301      	movs	r3, #1
 800519a:	e206      	b.n	80055aa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	899b      	ldrh	r3, [r3, #12]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d80d      	bhi.n	80051c2 <find_volume+0x10a>
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	899b      	ldrh	r3, [r3, #12]
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ae:	d308      	bcc.n	80051c2 <find_volume+0x10a>
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	899b      	ldrh	r3, [r3, #12]
 80051b4:	461a      	mov	r2, r3
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	899b      	ldrh	r3, [r3, #12]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <find_volume+0x10e>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e1f1      	b.n	80055aa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80051ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051ce:	f7ff ff1d 	bl	800500c <check_fs>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80051d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d14b      	bne.n	8005278 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80051e0:	2300      	movs	r3, #0
 80051e2:	643b      	str	r3, [r7, #64]	; 0x40
 80051e4:	e01f      	b.n	8005226 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80051f4:	4413      	add	r3, r2
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	3304      	adds	r3, #4
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <find_volume+0x158>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	3308      	adds	r3, #8
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fcd4 	bl	8003bb4 <ld_dword>
 800520c:	4602      	mov	r2, r0
 800520e:	e000      	b.n	8005212 <find_volume+0x15a>
 8005210:	2200      	movs	r2, #0
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800521a:	440b      	add	r3, r1
 800521c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005222:	3301      	adds	r3, #1
 8005224:	643b      	str	r3, [r7, #64]	; 0x40
 8005226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005228:	2b03      	cmp	r3, #3
 800522a:	d9dc      	bls.n	80051e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800522c:	2300      	movs	r3, #0
 800522e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <find_volume+0x184>
 8005236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005238:	3b01      	subs	r3, #1
 800523a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800523c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005244:	4413      	add	r3, r2
 8005246:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800524a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800524c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <find_volume+0x1a6>
 8005252:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005256:	f7ff fed9 	bl	800500c <check_fs>
 800525a:	4603      	mov	r3, r0
 800525c:	e000      	b.n	8005260 <find_volume+0x1a8>
 800525e:	2303      	movs	r3, #3
 8005260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005268:	2b01      	cmp	r3, #1
 800526a:	d905      	bls.n	8005278 <find_volume+0x1c0>
 800526c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526e:	3301      	adds	r3, #1
 8005270:	643b      	str	r3, [r7, #64]	; 0x40
 8005272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005274:	2b03      	cmp	r3, #3
 8005276:	d9e1      	bls.n	800523c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800527c:	2b04      	cmp	r3, #4
 800527e:	d101      	bne.n	8005284 <find_volume+0x1cc>
 8005280:	2301      	movs	r3, #1
 8005282:	e192      	b.n	80055aa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005288:	2b01      	cmp	r3, #1
 800528a:	d901      	bls.n	8005290 <find_volume+0x1d8>
 800528c:	230d      	movs	r3, #13
 800528e:	e18c      	b.n	80055aa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	3334      	adds	r3, #52	; 0x34
 8005294:	330b      	adds	r3, #11
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fc74 	bl	8003b84 <ld_word>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	899b      	ldrh	r3, [r3, #12]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <find_volume+0x1f4>
 80052a8:	230d      	movs	r3, #13
 80052aa:	e17e      	b.n	80055aa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	3334      	adds	r3, #52	; 0x34
 80052b0:	3316      	adds	r3, #22
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fc66 	bl	8003b84 <ld_word>
 80052b8:	4603      	mov	r3, r0
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80052bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <find_volume+0x218>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	3334      	adds	r3, #52	; 0x34
 80052c6:	3324      	adds	r3, #36	; 0x24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fc73 	bl	8003bb4 <ld_dword>
 80052ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052d4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	789b      	ldrb	r3, [r3, #2]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d005      	beq.n	80052f4 <find_volume+0x23c>
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	789b      	ldrb	r3, [r3, #2]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d001      	beq.n	80052f4 <find_volume+0x23c>
 80052f0:	230d      	movs	r3, #13
 80052f2:	e15a      	b.n	80055aa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	789b      	ldrb	r3, [r3, #2]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005308:	b29a      	uxth	r2, r3
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	895b      	ldrh	r3, [r3, #10]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <find_volume+0x270>
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	895b      	ldrh	r3, [r3, #10]
 800531a:	461a      	mov	r2, r3
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	895b      	ldrh	r3, [r3, #10]
 8005320:	3b01      	subs	r3, #1
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <find_volume+0x274>
 8005328:	230d      	movs	r3, #13
 800532a:	e13e      	b.n	80055aa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	3334      	adds	r3, #52	; 0x34
 8005330:	3311      	adds	r3, #17
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fc26 	bl	8003b84 <ld_word>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	891b      	ldrh	r3, [r3, #8]
 8005344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005346:	8992      	ldrh	r2, [r2, #12]
 8005348:	0952      	lsrs	r2, r2, #5
 800534a:	b292      	uxth	r2, r2
 800534c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005350:	fb02 f201 	mul.w	r2, r2, r1
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <find_volume+0x2a8>
 800535c:	230d      	movs	r3, #13
 800535e:	e124      	b.n	80055aa <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	3334      	adds	r3, #52	; 0x34
 8005364:	3313      	adds	r3, #19
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fc0c 	bl	8003b84 <ld_word>
 800536c:	4603      	mov	r3, r0
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <find_volume+0x2cc>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	3334      	adds	r3, #52	; 0x34
 800537a:	3320      	adds	r3, #32
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe fc19 	bl	8003bb4 <ld_dword>
 8005382:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	3334      	adds	r3, #52	; 0x34
 8005388:	330e      	adds	r3, #14
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fbfa 	bl	8003b84 <ld_word>
 8005390:	4603      	mov	r3, r0
 8005392:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005396:	2b00      	cmp	r3, #0
 8005398:	d104      	bne.n	80053a4 <find_volume+0x2ec>
 800539a:	230d      	movs	r3, #13
 800539c:	e105      	b.n	80055aa <find_volume+0x4f2>
 800539e:	bf00      	nop
 80053a0:	20000028 	.word	0x20000028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80053a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a8:	4413      	add	r3, r2
 80053aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ac:	8911      	ldrh	r1, [r2, #8]
 80053ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b0:	8992      	ldrh	r2, [r2, #12]
 80053b2:	0952      	lsrs	r2, r2, #5
 80053b4:	b292      	uxth	r2, r2
 80053b6:	fbb1 f2f2 	udiv	r2, r1, r2
 80053ba:	b292      	uxth	r2, r2
 80053bc:	4413      	add	r3, r2
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80053c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d201      	bcs.n	80053cc <find_volume+0x314>
 80053c8:	230d      	movs	r3, #13
 80053ca:	e0ee      	b.n	80055aa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80053cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d4:	8952      	ldrh	r2, [r2, #10]
 80053d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <find_volume+0x32e>
 80053e2:	230d      	movs	r3, #13
 80053e4:	e0e1      	b.n	80055aa <find_volume+0x4f2>
		fmt = FS_FAT32;
 80053e6:	2303      	movs	r3, #3
 80053e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d802      	bhi.n	80053fc <find_volume+0x344>
 80053f6:	2302      	movs	r3, #2
 80053f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005402:	4293      	cmp	r3, r2
 8005404:	d802      	bhi.n	800540c <find_volume+0x354>
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	1c9a      	adds	r2, r3, #2
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005418:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800541a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800541c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541e:	441a      	add	r2, r3
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005424:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	441a      	add	r2, r3
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800542e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005432:	2b03      	cmp	r3, #3
 8005434:	d11e      	bne.n	8005474 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	3334      	adds	r3, #52	; 0x34
 800543a:	332a      	adds	r3, #42	; 0x2a
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fba1 	bl	8003b84 <ld_word>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <find_volume+0x394>
 8005448:	230d      	movs	r3, #13
 800544a:	e0ae      	b.n	80055aa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	891b      	ldrh	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <find_volume+0x3a0>
 8005454:	230d      	movs	r3, #13
 8005456:	e0a8      	b.n	80055aa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	3334      	adds	r3, #52	; 0x34
 800545c:	332c      	adds	r3, #44	; 0x2c
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fba8 	bl	8003bb4 <ld_dword>
 8005464:	4602      	mov	r2, r0
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	647b      	str	r3, [r7, #68]	; 0x44
 8005472:	e01f      	b.n	80054b4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	891b      	ldrh	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <find_volume+0x3c8>
 800547c:	230d      	movs	r3, #13
 800547e:	e094      	b.n	80055aa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005486:	441a      	add	r2, r3
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800548c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005490:	2b02      	cmp	r3, #2
 8005492:	d103      	bne.n	800549c <find_volume+0x3e4>
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	e00a      	b.n	80054b2 <find_volume+0x3fa>
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	085a      	lsrs	r2, r3, #1
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	899b      	ldrh	r3, [r3, #12]
 80054bc:	4619      	mov	r1, r3
 80054be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c0:	440b      	add	r3, r1
 80054c2:	3b01      	subs	r3, #1
 80054c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054c6:	8989      	ldrh	r1, [r1, #12]
 80054c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d201      	bcs.n	80054d4 <find_volume+0x41c>
 80054d0:	230d      	movs	r3, #13
 80054d2:	e06a      	b.n	80055aa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f04f 32ff 	mov.w	r2, #4294967295
 80054da:	615a      	str	r2, [r3, #20]
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	695a      	ldr	r2, [r3, #20]
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80054ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d149      	bne.n	8005586 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	3334      	adds	r3, #52	; 0x34
 80054f6:	3330      	adds	r3, #48	; 0x30
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe fb43 	bl	8003b84 <ld_word>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d140      	bne.n	8005586 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005506:	3301      	adds	r3, #1
 8005508:	4619      	mov	r1, r3
 800550a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800550c:	f7fe fdea 	bl	80040e4 <move_window>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d137      	bne.n	8005586 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	2200      	movs	r2, #0
 800551a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	3334      	adds	r3, #52	; 0x34
 8005520:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe fb2d 	bl	8003b84 <ld_word>
 800552a:	4603      	mov	r3, r0
 800552c:	461a      	mov	r2, r3
 800552e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005532:	429a      	cmp	r2, r3
 8005534:	d127      	bne.n	8005586 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	3334      	adds	r3, #52	; 0x34
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fb3a 	bl	8003bb4 <ld_dword>
 8005540:	4602      	mov	r2, r0
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <find_volume+0x4fc>)
 8005544:	429a      	cmp	r2, r3
 8005546:	d11e      	bne.n	8005586 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	3334      	adds	r3, #52	; 0x34
 800554c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe fb2f 	bl	8003bb4 <ld_dword>
 8005556:	4602      	mov	r2, r0
 8005558:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <find_volume+0x500>)
 800555a:	429a      	cmp	r2, r3
 800555c:	d113      	bne.n	8005586 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	3334      	adds	r3, #52	; 0x34
 8005562:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fb24 	bl	8003bb4 <ld_dword>
 800556c:	4602      	mov	r2, r0
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	3334      	adds	r3, #52	; 0x34
 8005576:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fb1a 	bl	8003bb4 <ld_dword>
 8005580:	4602      	mov	r2, r0
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800558c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800558e:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <find_volume+0x504>)
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <find_volume+0x504>)
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	4b08      	ldr	r3, [pc, #32]	; (80055bc <find_volume+0x504>)
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80055a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a4:	f7fe fd36 	bl	8004014 <clear_lock>
#endif
	return FR_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3758      	adds	r7, #88	; 0x58
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	41615252 	.word	0x41615252
 80055b8:	61417272 	.word	0x61417272
 80055bc:	2000002c 	.word	0x2000002c

080055c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80055ca:	2309      	movs	r3, #9
 80055cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01c      	beq.n	800560e <validate+0x4e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d018      	beq.n	800560e <validate+0x4e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d013      	beq.n	800560e <validate+0x4e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	889a      	ldrh	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	88db      	ldrh	r3, [r3, #6]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d10c      	bne.n	800560e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fa24 	bl	8003a48 <disk_status>
 8005600:	4603      	mov	r3, r0
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <validate+0x4e>
			res = FR_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <validate+0x5a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	e000      	b.n	800561c <validate+0x5c>
 800561a:	2300      	movs	r3, #0
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	6013      	str	r3, [r2, #0]
	return res;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800563e:	f107 0310 	add.w	r3, r7, #16
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fc9e 	bl	8004f84 <get_ldnumber>
 8005648:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	da01      	bge.n	8005654 <f_mount+0x28>
 8005650:	230b      	movs	r3, #11
 8005652:	e02b      	b.n	80056ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <f_mount+0x88>)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005664:	69b8      	ldr	r0, [r7, #24]
 8005666:	f7fe fcd5 	bl	8004014 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	490d      	ldr	r1, [pc, #52]	; (80056b4 <f_mount+0x88>)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <f_mount+0x66>
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d001      	beq.n	8005696 <f_mount+0x6a>
 8005692:	2300      	movs	r3, #0
 8005694:	e00a      	b.n	80056ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005696:	f107 010c 	add.w	r1, r7, #12
 800569a:	f107 0308 	add.w	r3, r7, #8
 800569e:	2200      	movs	r2, #0
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fd09 	bl	80050b8 <find_volume>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000028 	.word	0x20000028

080056b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b098      	sub	sp, #96	; 0x60
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <f_open+0x18>
 80056cc:	2309      	movs	r3, #9
 80056ce:	e1bb      	b.n	8005a48 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80056d8:	79fa      	ldrb	r2, [r7, #7]
 80056da:	f107 0110 	add.w	r1, r7, #16
 80056de:	f107 0308 	add.w	r3, r7, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fce8 	bl	80050b8 <find_volume>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80056ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 819f 	bne.w	8005a36 <f_open+0x37e>
		dj.obj.fs = fs;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	f107 0314 	add.w	r3, r7, #20
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff fbc7 	bl	8004e98 <follow_path>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11a      	bne.n	800574e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005718:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800571c:	b25b      	sxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	da03      	bge.n	800572a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005722:	2306      	movs	r3, #6
 8005724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005728:	e011      	b.n	800574e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	f107 0314 	add.w	r3, r7, #20
 8005740:	4611      	mov	r1, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fb1e 	bl	8003d84 <chk_lock>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	f003 031c 	and.w	r3, r3, #28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d07f      	beq.n	8005858 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005764:	2b04      	cmp	r3, #4
 8005766:	d10e      	bne.n	8005786 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005768:	f7fe fb68 	bl	8003e3c <enq_lock>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <f_open+0xc8>
 8005772:	f107 0314 	add.w	r3, r7, #20
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fac7 	bl	8004d0a <dir_register>
 800577c:	4603      	mov	r3, r0
 800577e:	e000      	b.n	8005782 <f_open+0xca>
 8005780:	2312      	movs	r3, #18
 8005782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	f043 0308 	orr.w	r3, r3, #8
 800578c:	71fb      	strb	r3, [r7, #7]
 800578e:	e010      	b.n	80057b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005790:	7ebb      	ldrb	r3, [r7, #26]
 8005792:	f003 0311 	and.w	r3, r3, #17
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <f_open+0xea>
					res = FR_DENIED;
 800579a:	2307      	movs	r3, #7
 800579c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80057a0:	e007      	b.n	80057b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <f_open+0xfa>
 80057ac:	2308      	movs	r3, #8
 80057ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80057b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d168      	bne.n	800588c <f_open+0x1d4>
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d063      	beq.n	800588c <f_open+0x1d4>
				dw = GET_FATTIME();
 80057c4:	f000 fc72 	bl	80060ac <get_fattime>
 80057c8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80057ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057cc:	330e      	adds	r3, #14
 80057ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe fa2d 	bl	8003c30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	3316      	adds	r3, #22
 80057da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fa27 	bl	8003c30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80057e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e4:	330b      	adds	r3, #11
 80057e6:	2220      	movs	r2, #32
 80057e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ee:	4611      	mov	r1, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff f9f6 	bl	8004be2 <ld_clust>
 80057f6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057fc:	2200      	movs	r2, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fa0e 	bl	8004c20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	331c      	adds	r3, #28
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fa10 	bl	8003c30 <st_dword>
					fs->wflag = 1;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2201      	movs	r2, #1
 8005814:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d037      	beq.n	800588c <f_open+0x1d4>
						dw = fs->winsect;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005822:	f107 0314 	add.w	r3, r7, #20
 8005826:	2200      	movs	r2, #0
 8005828:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fefe 	bl	800462c <remove_chain>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800583a:	2b00      	cmp	r3, #0
 800583c:	d126      	bne.n	800588c <f_open+0x1d4>
							res = move_window(fs, dw);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fc4e 	bl	80040e4 <move_window>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005852:	3a01      	subs	r2, #1
 8005854:	611a      	str	r2, [r3, #16]
 8005856:	e019      	b.n	800588c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800585c:	2b00      	cmp	r3, #0
 800585e:	d115      	bne.n	800588c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005860:	7ebb      	ldrb	r3, [r7, #26]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <f_open+0x1ba>
					res = FR_NO_FILE;
 800586a:	2304      	movs	r3, #4
 800586c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005870:	e00c      	b.n	800588c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <f_open+0x1d4>
 800587c:	7ebb      	ldrb	r3, [r7, #26]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <f_open+0x1d4>
						res = FR_DENIED;
 8005886:	2307      	movs	r3, #7
 8005888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800588c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005890:	2b00      	cmp	r3, #0
 8005892:	d128      	bne.n	80058e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80058ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	f107 0314 	add.w	r3, r7, #20
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fad7 	bl	8003e80 <inc_lock>
 80058d2:	4602      	mov	r2, r0
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <f_open+0x22e>
 80058e0:	2302      	movs	r3, #2
 80058e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80058e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 80a3 	bne.w	8005a36 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f973 	bl	8004be2 <ld_clust>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	331c      	adds	r3, #28
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe f954 	bl	8003bb4 <ld_dword>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	88da      	ldrh	r2, [r3, #6]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	79fa      	ldrb	r2, [r7, #7]
 800592a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3330      	adds	r3, #48	; 0x30
 8005942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe f9be 	bl	8003cca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d06e      	beq.n	8005a36 <f_open+0x37e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d06a      	beq.n	8005a36 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	895b      	ldrh	r3, [r3, #10]
 800596c:	461a      	mov	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	899b      	ldrh	r3, [r3, #12]
 8005972:	fb03 f302 	mul.w	r3, r3, r2
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	657b      	str	r3, [r7, #84]	; 0x54
 8005984:	e016      	b.n	80059b4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fc67 	bl	800425e <get_fat>
 8005990:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005994:	2b01      	cmp	r3, #1
 8005996:	d802      	bhi.n	800599e <f_open+0x2e6>
 8005998:	2302      	movs	r3, #2
 800599a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800599e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a4:	d102      	bne.n	80059ac <f_open+0x2f4>
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80059ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	657b      	str	r3, [r7, #84]	; 0x54
 80059b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <f_open+0x30c>
 80059bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d8e0      	bhi.n	8005986 <f_open+0x2ce>
				}
				fp->clust = clst;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80059ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d131      	bne.n	8005a36 <f_open+0x37e>
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	899b      	ldrh	r3, [r3, #12]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059da:	fbb3 f1f2 	udiv	r1, r3, r2
 80059de:	fb02 f201 	mul.w	r2, r2, r1
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d026      	beq.n	8005a36 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fe fc17 	bl	8004220 <clust2sect>
 80059f2:	6478      	str	r0, [r7, #68]	; 0x44
 80059f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <f_open+0x34a>
						res = FR_INT_ERR;
 80059fa:	2302      	movs	r3, #2
 80059fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005a00:	e019      	b.n	8005a36 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	899b      	ldrh	r3, [r3, #12]
 8005a06:	461a      	mov	r2, r3
 8005a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	7858      	ldrb	r0, [r3, #1]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1a      	ldr	r2, [r3, #32]
 8005a24:	2301      	movs	r3, #1
 8005a26:	f7fe f84f 	bl	8003ac8 <disk_read>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <f_open+0x37e>
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <f_open+0x38c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3760      	adds	r7, #96	; 0x60
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f107 0210 	add.w	r2, r7, #16
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fda5 	bl	80055c0 <validate>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d107      	bne.n	8005a94 <f_write+0x44>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	7d5b      	ldrb	r3, [r3, #21]
 8005a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <f_write+0x4a>
 8005a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a98:	e16a      	b.n	8005d70 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	7d1b      	ldrb	r3, [r3, #20]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <f_write+0x5a>
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	e162      	b.n	8005d70 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	f080 814c 	bcs.w	8005d54 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005ac4:	e146      	b.n	8005d54 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	8992      	ldrh	r2, [r2, #12]
 8005ace:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ad2:	fb02 f201 	mul.w	r2, r2, r1
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f040 80f1 	bne.w	8005cc0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	8992      	ldrh	r2, [r2, #12]
 8005ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	8952      	ldrh	r2, [r2, #10]
 8005aee:	3a01      	subs	r2, #1
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d143      	bne.n	8005b82 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11a      	bne.n	8005b44 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fdef 	bl	80046f6 <create_chain>
 8005b18:	62b8      	str	r0, [r7, #40]	; 0x28
 8005b1a:	e013      	b.n	8005b44 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7fe fe7b 	bl	8004826 <clmt_clust>
 8005b30:	62b8      	str	r0, [r7, #40]	; 0x28
 8005b32:	e007      	b.n	8005b44 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7fe fdda 	bl	80046f6 <create_chain>
 8005b42:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8109 	beq.w	8005d5e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d104      	bne.n	8005b5c <f_write+0x10c>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2202      	movs	r2, #2
 8005b56:	755a      	strb	r2, [r3, #21]
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e109      	b.n	8005d70 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d104      	bne.n	8005b6e <f_write+0x11e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	755a      	strb	r2, [r3, #21]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e100      	b.n	8005d70 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <f_write+0x132>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	7d1b      	ldrb	r3, [r3, #20]
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da18      	bge.n	8005bbe <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	7858      	ldrb	r0, [r3, #1]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f7fd ffb4 	bl	8003b08 <disk_write>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <f_write+0x160>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	755a      	strb	r2, [r3, #21]
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0df      	b.n	8005d70 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	7d1b      	ldrb	r3, [r3, #20]
 8005bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7fe fb2a 	bl	8004220 <clust2sect>
 8005bcc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <f_write+0x18e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	755a      	strb	r2, [r3, #21]
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e0c8      	b.n	8005d70 <f_write+0x320>
			sect += csect;
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	4413      	add	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	899b      	ldrh	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d043      	beq.n	8005c82 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	4413      	add	r3, r2
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	8952      	ldrh	r2, [r2, #10]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d905      	bls.n	8005c14 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	895b      	ldrh	r3, [r3, #10]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	7858      	ldrb	r0, [r3, #1]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	69f9      	ldr	r1, [r7, #28]
 8005c1e:	f7fd ff73 	bl	8003b08 <disk_write>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <f_write+0x1e2>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	755a      	strb	r2, [r3, #21]
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e09e      	b.n	8005d70 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	1ad2      	subs	r2, r2, r3
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d218      	bcs.n	8005c72 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	8992      	ldrh	r2, [r2, #12]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	18d1      	adds	r1, r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	899b      	ldrh	r3, [r3, #12]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fe f812 	bl	8003c88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	7d1b      	ldrb	r3, [r3, #20]
 8005c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	899b      	ldrh	r3, [r3, #12]
 8005c76:	461a      	mov	r2, r3
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	fb03 f302 	mul.w	r3, r3, r2
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005c80:	e04b      	b.n	8005d1a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d016      	beq.n	8005cba <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	699a      	ldr	r2, [r3, #24]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d210      	bcs.n	8005cba <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	7858      	ldrb	r0, [r3, #1]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	f7fd ff0f 	bl	8003ac8 <disk_read>
 8005caa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	755a      	strb	r2, [r3, #21]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e05a      	b.n	8005d70 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	899b      	ldrh	r3, [r3, #12]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	8992      	ldrh	r2, [r2, #12]
 8005cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cd2:	fb02 f201 	mul.w	r2, r2, r1
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	1ac3      	subs	r3, r0, r3
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d901      	bls.n	8005ce8 <f_write+0x298>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	8992      	ldrh	r2, [r2, #12]
 8005cf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cfa:	fb02 f200 	mul.w	r2, r2, r0
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	440b      	add	r3, r1
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d04:	69f9      	ldr	r1, [r7, #28]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fd ffbe 	bl	8003c88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	7d1b      	ldrb	r3, [r3, #20]
 8005d10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	4413      	add	r3, r2
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	441a      	add	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	619a      	str	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	bf38      	it	cc
 8005d3a:	461a      	movcc	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	441a      	add	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f47f aeb5 	bne.w	8005ac6 <f_write+0x76>
 8005d5c:	e000      	b.n	8005d60 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	7d1b      	ldrb	r3, [r3, #20]
 8005d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3730      	adds	r7, #48	; 0x30
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f107 0208 	add.w	r2, r7, #8
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fc19 	bl	80055c0 <validate>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d168      	bne.n	8005e6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7d1b      	ldrb	r3, [r3, #20]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d062      	beq.n	8005e6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	7d1b      	ldrb	r3, [r3, #20]
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da15      	bge.n	8005dda <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	7858      	ldrb	r0, [r3, #1]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1a      	ldr	r2, [r3, #32]
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f7fd fea3 	bl	8003b08 <disk_write>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <f_sync+0x54>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e04f      	b.n	8005e6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7d1b      	ldrb	r3, [r3, #20]
 8005dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005dda:	f000 f967 	bl	80060ac <get_fattime>
 8005dde:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7fe f97b 	bl	80040e4 <move_window>
 8005dee:	4603      	mov	r3, r0
 8005df0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d138      	bne.n	8005e6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	330b      	adds	r3, #11
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	320b      	adds	r2, #11
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	f042 0220 	orr.w	r2, r2, #32
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	f7fe ff00 	bl	8004c20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f103 021c 	add.w	r2, r3, #28
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f7fd feff 	bl	8003c30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3316      	adds	r3, #22
 8005e36:	6939      	ldr	r1, [r7, #16]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fd fef9 	bl	8003c30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3312      	adds	r3, #18
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fd fed8 	bl	8003bfa <st_word>
					fs->wflag = 1;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe f974 	bl	8004140 <sync_fs>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7d1b      	ldrb	r3, [r3, #20]
 8005e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff7b 	bl	8005d78 <f_sync>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d118      	bne.n	8005ebe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f107 0208 	add.w	r2, r7, #8
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fb93 	bl	80055c0 <validate>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe f877 	bl	8003f9c <dec_lock>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005ee0:	7a5b      	ldrb	r3, [r3, #9]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d131      	bne.n	8005f4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ee8:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005eea:	7a5b      	ldrb	r3, [r3, #9]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005ef6:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005ef8:	7a5b      	ldrb	r3, [r3, #9]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005f06:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f08:	7a5b      	ldrb	r3, [r3, #9]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f10:	4413      	add	r3, r2
 8005f12:	79fa      	ldrb	r2, [r7, #7]
 8005f14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f18:	7a5b      	ldrb	r3, [r3, #9]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	b2d1      	uxtb	r1, r2
 8005f20:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <FATFS_LinkDriverEx+0x94>)
 8005f22:	7251      	strb	r1, [r2, #9]
 8005f24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005f26:	7dbb      	ldrb	r3, [r7, #22]
 8005f28:	3330      	adds	r3, #48	; 0x30
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3301      	adds	r3, #1
 8005f34:	223a      	movs	r2, #58	; 0x3a
 8005f36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	222f      	movs	r2, #47	; 0x2f
 8005f3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3303      	adds	r3, #3
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000050 	.word	0x20000050

08005f60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ffaa 	bl	8005ec8 <FATFS_LinkDriverEx>
 8005f74:	4603      	mov	r3, r0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005f8a:	f000 f86b 	bl	8006064 <BSP_SD_IsDetected>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d001      	beq.n	8005f98 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e005      	b.n	8005fa4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005f98:	4804      	ldr	r0, [pc, #16]	; (8005fac <BSP_SD_Init+0x2c>)
 8005f9a:	f7fb fe47 	bl	8001c2c <HAL_SD_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	200020cc 	.word	0x200020cc

08005fb0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	68f9      	ldr	r1, [r7, #12]
 8005fcc:	4806      	ldr	r0, [pc, #24]	; (8005fe8 <BSP_SD_ReadBlocks+0x38>)
 8005fce:	f7fb feb5 	bl	8001d3c <HAL_SD_ReadBlocks>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200020cc 	.word	0x200020cc

08005fec <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	4806      	ldr	r0, [pc, #24]	; (8006024 <BSP_SD_WriteBlocks+0x38>)
 800600a:	f7fc f82d 	bl	8002068 <HAL_SD_WriteBlocks>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006018:	7dfb      	ldrb	r3, [r7, #23]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	200020cc 	.word	0x200020cc

08006028 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800602c:	4805      	ldr	r0, [pc, #20]	; (8006044 <BSP_SD_GetCardState+0x1c>)
 800602e:	f7fc fbd9 	bl	80027e4 <HAL_SD_GetCardState>
 8006032:	4603      	mov	r3, r0
 8006034:	2b04      	cmp	r3, #4
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
}
 800603e:	4618      	mov	r0, r3
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	200020cc 	.word	0x200020cc

08006048 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4803      	ldr	r0, [pc, #12]	; (8006060 <BSP_SD_GetCardInfo+0x18>)
 8006054:	f7fc fb9a 	bl	800278c <HAL_SD_GetCardInfo>
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200020cc 	.word	0x200020cc

08006064 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800606a:	2301      	movs	r3, #1
 800606c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800606e:	f000 f825 	bl	80060bc <BSP_PlatformIsDetected>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006078:	2300      	movs	r3, #0
 800607a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	b2db      	uxtb	r3, r3
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800608c:	4904      	ldr	r1, [pc, #16]	; (80060a0 <MX_FATFS_Init+0x18>)
 800608e:	4805      	ldr	r0, [pc, #20]	; (80060a4 <MX_FATFS_Init+0x1c>)
 8006090:	f7ff ff66 	bl	8005f60 <FATFS_LinkDriver>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <MX_FATFS_Init+0x20>)
 800609a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800609c:	bf00      	nop
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000064 	.word	0x20000064
 80060a4:	08006ac4 	.word	0x08006ac4
 80060a8:	20000060 	.word	0x20000060

080060ac <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80060b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80060c2:	2301      	movs	r3, #1
 80060c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80060c6:	2101      	movs	r1, #1
 80060c8:	4806      	ldr	r0, [pc, #24]	; (80060e4 <BSP_PlatformIsDetected+0x28>)
 80060ca:	f7fa fd2d 	bl	8000b28 <HAL_GPIO_ReadPin>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80060d4:	2300      	movs	r3, #0
 80060d6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80060d8:	79fb      	ldrb	r3, [r7, #7]
}  
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40020800 	.word	0x40020800

080060e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80060e8:	b5b0      	push	{r4, r5, r7, lr}
 80060ea:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80060f2:	f7fa fa0f 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80060f6:	f000 f861 	bl	80061bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80060fa:	f000 f937 	bl	800636c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80060fe:	f000 f8eb 	bl	80062d8 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 8006102:	f000 f909 	bl	8006318 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006106:	f7ff ffbf 	bl	8006088 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  FATFS fileSystem;
   FIL testFile;
   //uint8_t testBuffer[] = "SD write success, Noe writting now\n";
   uint8_t testBuffer[] = {1,2,3,23,24,25,57,58,59,80,81,82,105,106,107,140,141,142,175,176,177,200,201,202,244,245,246,'\r','\n'};
 800610a:	f107 0318 	add.w	r3, r7, #24
 800610e:	3b08      	subs	r3, #8
 8006110:	4a27      	ldr	r2, [pc, #156]	; (80061b0 <main+0xc8>)
 8006112:	461c      	mov	r4, r3
 8006114:	4615      	mov	r5, r2
 8006116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800611e:	c407      	stmia	r4!, {r0, r1, r2}
 8006120:	7023      	strb	r3, [r4, #0]
   UINT testBytes;
   FRESULT res;

   if(f_mount(&fileSystem, SDPath, 1) == FR_OK)
 8006122:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8006126:	f103 0318 	add.w	r3, r3, #24
 800612a:	3b18      	subs	r3, #24
 800612c:	2201      	movs	r2, #1
 800612e:	4921      	ldr	r1, [pc, #132]	; (80061b4 <main+0xcc>)
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fa7b 	bl	800562c <f_mount>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d134      	bne.n	80061a6 <main+0xbe>
   {
      //uint8_t path[] = "testfile2.txt\0";
      uint8_t path[] = "file30.txt\0";
 800613c:	f107 0318 	add.w	r3, r7, #24
 8006140:	3b18      	subs	r3, #24
 8006142:	4a1d      	ldr	r2, [pc, #116]	; (80061b8 <main+0xd0>)
 8006144:	ca07      	ldmia	r2, {r0, r1, r2}
 8006146:	e883 0007 	stmia.w	r3, {r0, r1, r2}

      res = f_open(&testFile, (char*)path, FA_WRITE | FA_OPEN_APPEND);
 800614a:	f107 0118 	add.w	r1, r7, #24
 800614e:	3918      	subs	r1, #24
 8006150:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006154:	3b28      	subs	r3, #40	; 0x28
 8006156:	2232      	movs	r2, #50	; 0x32
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff faad 	bl	80056b8 <f_open>
 800615e:	4603      	mov	r3, r0
 8006160:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8006164:	f102 0217 	add.w	r2, r2, #23
 8006168:	7013      	strb	r3, [r2, #0]

      res = f_write(&testFile, testBuffer, sizeof(testBuffer), &testBytes);
 800616a:	f107 0318 	add.w	r3, r7, #24
 800616e:	3b0c      	subs	r3, #12
 8006170:	f107 0118 	add.w	r1, r7, #24
 8006174:	3908      	subs	r1, #8
 8006176:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800617a:	3828      	subs	r0, #40	; 0x28
 800617c:	221d      	movs	r2, #29
 800617e:	f7ff fc67 	bl	8005a50 <f_write>
 8006182:	4603      	mov	r3, r0
 8006184:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8006188:	f102 0217 	add.w	r2, r2, #23
 800618c:	7013      	strb	r3, [r2, #0]

      res = f_close(&testFile);
 800618e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006192:	3b28      	subs	r3, #40	; 0x28
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fe6d 	bl	8005e74 <f_close>
 800619a:	4603      	mov	r3, r0
 800619c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80061a0:	f102 0217 	add.w	r2, r2, #23
 80061a4:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80061a6:	2064      	movs	r0, #100	; 0x64
 80061a8:	f7fa fa26 	bl	80005f8 <HAL_Delay>
 80061ac:	e7fb      	b.n	80061a6 <main+0xbe>
 80061ae:	bf00      	nop
 80061b0:	08006a18 	.word	0x08006a18
 80061b4:	20000064 	.word	0x20000064
 80061b8:	08006a38 	.word	0x08006a38

080061bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b0ac      	sub	sp, #176	; 0xb0
 80061c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80061c6:	2234      	movs	r2, #52	; 0x34
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fbee 	bl	80069ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	605a      	str	r2, [r3, #4]
 80061da:	609a      	str	r2, [r3, #8]
 80061dc:	60da      	str	r2, [r3, #12]
 80061de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	225c      	movs	r2, #92	; 0x5c
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fbdf 	bl	80069ac <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	4a37      	ldr	r2, [pc, #220]	; (80062d0 <SystemClock_Config+0x114>)
 80061f4:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <SystemClock_Config+0x114>)
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fc:	6413      	str	r3, [r2, #64]	; 0x40
 80061fe:	4b34      	ldr	r3, [pc, #208]	; (80062d0 <SystemClock_Config+0x114>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006206:	60bb      	str	r3, [r7, #8]
 8006208:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	4a31      	ldr	r2, [pc, #196]	; (80062d4 <SystemClock_Config+0x118>)
 8006210:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <SystemClock_Config+0x118>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	4b2d      	ldr	r3, [pc, #180]	; (80062d4 <SystemClock_Config+0x118>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800622a:	2302      	movs	r3, #2
 800622c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800622e:	2301      	movs	r3, #1
 8006230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006234:	2310      	movs	r3, #16
 8006236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800623a:	2302      	movs	r3, #2
 800623c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006240:	2300      	movs	r3, #0
 8006242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006246:	2308      	movs	r3, #8
 8006248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 54;
 800624c:	2336      	movs	r3, #54	; 0x36
 800624e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006252:	2302      	movs	r3, #2
 8006254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006258:	2309      	movs	r3, #9
 800625a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800625e:	2302      	movs	r3, #2
 8006260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006264:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006268:	4618      	mov	r0, r3
 800626a:	f7fb fa85 	bl	8001778 <HAL_RCC_OscConfig>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006274:	f000 f904 	bl	8006480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006278:	230f      	movs	r3, #15
 800627a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800627c:	2302      	movs	r3, #2
 800627e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006280:	2300      	movs	r3, #0
 8006282:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006288:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800628a:	2300      	movs	r3, #0
 800628c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800628e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006292:	2101      	movs	r1, #1
 8006294:	4618      	mov	r0, r3
 8006296:	f7fa fc79 	bl	8000b8c <HAL_RCC_ClockConfig>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80062a0:	f000 f8ee 	bl	8006480 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80062a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80062a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80062aa:	2300      	movs	r3, #0
 80062ac:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80062ae:	2300      	movs	r3, #0
 80062b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fa fd7e 	bl	8000db8 <HAL_RCCEx_PeriphCLKConfig>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80062c2:	f000 f8dd 	bl	8006480 <Error_Handler>
  }
}
 80062c6:	bf00      	nop
 80062c8:	37b0      	adds	r7, #176	; 0xb0
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	40023800 	.word	0x40023800
 80062d4:	40007000 	.word	0x40007000

080062d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80062dc:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <MX_SDIO_SD_Init+0x38>)
 80062de:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <MX_SDIO_SD_Init+0x3c>)
 80062e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <MX_SDIO_SD_Init+0x38>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80062e8:	4b09      	ldr	r3, [pc, #36]	; (8006310 <MX_SDIO_SD_Init+0x38>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80062ee:	4b08      	ldr	r3, [pc, #32]	; (8006310 <MX_SDIO_SD_Init+0x38>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <MX_SDIO_SD_Init+0x38>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <MX_SDIO_SD_Init+0x38>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <MX_SDIO_SD_Init+0x38>)
 8006302:	2203      	movs	r2, #3
 8006304:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006306:	bf00      	nop
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	200020cc 	.word	0x200020cc
 8006314:	40012c00 	.word	0x40012c00

08006318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800631c:	4b11      	ldr	r3, [pc, #68]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 800631e:	4a12      	ldr	r2, [pc, #72]	; (8006368 <MX_USART2_UART_Init+0x50>)
 8006320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006322:	4b10      	ldr	r3, [pc, #64]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 8006324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800632a:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 8006332:	2200      	movs	r2, #0
 8006334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 800633e:	220c      	movs	r2, #12
 8006340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 800634a:	2200      	movs	r2, #0
 800634c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800634e:	4805      	ldr	r0, [pc, #20]	; (8006364 <MX_USART2_UART_Init+0x4c>)
 8006350:	f7fc fc08 	bl	8002b64 <HAL_UART_Init>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800635a:	f000 f891 	bl	8006480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20002150 	.word	0x20002150
 8006368:	40004400 	.word	0x40004400

0800636c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006372:	f107 0314 	add.w	r3, r7, #20
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	605a      	str	r2, [r3, #4]
 800637c:	609a      	str	r2, [r3, #8]
 800637e:	60da      	str	r2, [r3, #12]
 8006380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	4a3a      	ldr	r2, [pc, #232]	; (8006470 <MX_GPIO_Init+0x104>)
 8006388:	4b39      	ldr	r3, [pc, #228]	; (8006470 <MX_GPIO_Init+0x104>)
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	f043 0304 	orr.w	r3, r3, #4
 8006390:	6313      	str	r3, [r2, #48]	; 0x30
 8006392:	4b37      	ldr	r3, [pc, #220]	; (8006470 <MX_GPIO_Init+0x104>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	4a33      	ldr	r2, [pc, #204]	; (8006470 <MX_GPIO_Init+0x104>)
 80063a4:	4b32      	ldr	r3, [pc, #200]	; (8006470 <MX_GPIO_Init+0x104>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b30      	ldr	r3, [pc, #192]	; (8006470 <MX_GPIO_Init+0x104>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	4a2c      	ldr	r2, [pc, #176]	; (8006470 <MX_GPIO_Init+0x104>)
 80063c0:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <MX_GPIO_Init+0x104>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	6313      	str	r3, [r2, #48]	; 0x30
 80063ca:	4b29      	ldr	r3, [pc, #164]	; (8006470 <MX_GPIO_Init+0x104>)
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	607b      	str	r3, [r7, #4]
 80063da:	4a25      	ldr	r2, [pc, #148]	; (8006470 <MX_GPIO_Init+0x104>)
 80063dc:	4b24      	ldr	r3, [pc, #144]	; (8006470 <MX_GPIO_Init+0x104>)
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	6313      	str	r3, [r2, #48]	; 0x30
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <MX_GPIO_Init+0x104>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	607b      	str	r3, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <MX_GPIO_Init+0x104>)
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <MX_GPIO_Init+0x104>)
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	f043 0308 	orr.w	r3, r3, #8
 8006400:	6313      	str	r3, [r2, #48]	; 0x30
 8006402:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <MX_GPIO_Init+0x104>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800640e:	2200      	movs	r2, #0
 8006410:	2120      	movs	r1, #32
 8006412:	4818      	ldr	r0, [pc, #96]	; (8006474 <MX_GPIO_Init+0x108>)
 8006414:	f7fa fba0 	bl	8000b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800641c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800641e:	4b16      	ldr	r3, [pc, #88]	; (8006478 <MX_GPIO_Init+0x10c>)
 8006420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006426:	f107 0314 	add.w	r3, r7, #20
 800642a:	4619      	mov	r1, r3
 800642c:	4813      	ldr	r0, [pc, #76]	; (800647c <MX_GPIO_Init+0x110>)
 800642e:	f7fa f9e9 	bl	8000804 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8006432:	2301      	movs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006436:	2300      	movs	r3, #0
 8006438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800643e:	f107 0314 	add.w	r3, r7, #20
 8006442:	4619      	mov	r1, r3
 8006444:	480d      	ldr	r0, [pc, #52]	; (800647c <MX_GPIO_Init+0x110>)
 8006446:	f7fa f9dd 	bl	8000804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800644a:	2320      	movs	r3, #32
 800644c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800644e:	2301      	movs	r3, #1
 8006450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006456:	2300      	movs	r3, #0
 8006458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	4619      	mov	r1, r3
 8006460:	4804      	ldr	r0, [pc, #16]	; (8006474 <MX_GPIO_Init+0x108>)
 8006462:	f7fa f9cf 	bl	8000804 <HAL_GPIO_Init>

}
 8006466:	bf00      	nop
 8006468:	3728      	adds	r7, #40	; 0x28
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40023800 	.word	0x40023800
 8006474:	40020000 	.word	0x40020000
 8006478:	10210000 	.word	0x10210000
 800647c:	40020800 	.word	0x40020800

08006480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006484:	bf00      	nop
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <SD_CheckStatus+0x38>)
 800649c:	2201      	movs	r2, #1
 800649e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80064a0:	f7ff fdc2 	bl	8006028 <BSP_SD_GetCardState>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d107      	bne.n	80064ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <SD_CheckStatus+0x38>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <SD_CheckStatus+0x38>)
 80064b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80064ba:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <SD_CheckStatus+0x38>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000005 	.word	0x20000005

080064cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <SD_initialize+0x38>)
 80064d8:	2201      	movs	r2, #1
 80064da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80064dc:	f7ff fd50 	bl	8005f80 <BSP_SD_Init>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ffd1 	bl	8006490 <SD_CheckStatus>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	4b04      	ldr	r3, [pc, #16]	; (8006504 <SD_initialize+0x38>)
 80064f4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80064f6:	4b03      	ldr	r3, [pc, #12]	; (8006504 <SD_initialize+0x38>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b2db      	uxtb	r3, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000005 	.word	0x20000005

08006508 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ffbb 	bl	8006490 <SD_CheckStatus>
 800651a:	4603      	mov	r3, r0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006538:	f04f 33ff 	mov.w	r3, #4294967295
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	68b8      	ldr	r0, [r7, #8]
 8006542:	f7ff fd35 	bl	8005fb0 <BSP_SD_ReadBlocks>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d107      	bne.n	800655c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800654c:	bf00      	nop
 800654e:	f7ff fd6b 	bl	8006028 <BSP_SD_GetCardState>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1fa      	bne.n	800654e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b086      	sub	sp, #24
 800656a:	af00      	add	r7, sp, #0
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800657a:	f04f 33ff 	mov.w	r3, #4294967295
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f7ff fd32 	bl	8005fec <BSP_SD_WriteBlocks>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d107      	bne.n	800659e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800658e:	bf00      	nop
 8006590:	f7ff fd4a 	bl	8006028 <BSP_SD_GetCardState>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1fa      	bne.n	8006590 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08c      	sub	sp, #48	; 0x30
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	603a      	str	r2, [r7, #0]
 80065b2:	71fb      	strb	r3, [r7, #7]
 80065b4:	460b      	mov	r3, r1
 80065b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80065be:	4b25      	ldr	r3, [pc, #148]	; (8006654 <SD_ioctl+0xac>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <SD_ioctl+0x28>
 80065cc:	2303      	movs	r3, #3
 80065ce:	e03c      	b.n	800664a <SD_ioctl+0xa2>

  switch (cmd)
 80065d0:	79bb      	ldrb	r3, [r7, #6]
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d834      	bhi.n	8006640 <SD_ioctl+0x98>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <SD_ioctl+0x34>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065ed 	.word	0x080065ed
 80065e0:	080065f5 	.word	0x080065f5
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006627 	.word	0x08006627
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065f2:	e028      	b.n	8006646 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80065f4:	f107 030c 	add.w	r3, r7, #12
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fd25 	bl	8006048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80065fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800660a:	e01c      	b.n	8006646 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800660c:	f107 030c 	add.w	r3, r7, #12
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fd19 	bl	8006048 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	b29a      	uxth	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006624:	e00f      	b.n	8006646 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006626:	f107 030c 	add.w	r3, r7, #12
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fd0c 	bl	8006048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	0a5a      	lsrs	r2, r3, #9
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800663e:	e002      	b.n	8006646 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006640:	2304      	movs	r3, #4
 8006642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800664a:	4618      	mov	r0, r3
 800664c:	3730      	adds	r7, #48	; 0x30
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000005 	.word	0x20000005

08006658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <HAL_MspInit+0x4c>)
 8006664:	4b0f      	ldr	r3, [pc, #60]	; (80066a4 <HAL_MspInit+0x4c>)
 8006666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800666c:	6453      	str	r3, [r2, #68]	; 0x44
 800666e:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <HAL_MspInit+0x4c>)
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <HAL_MspInit+0x4c>)
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <HAL_MspInit+0x4c>)
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006688:	6413      	str	r3, [r2, #64]	; 0x40
 800668a:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <HAL_MspInit+0x4c>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006696:	2007      	movs	r0, #7
 8006698:	f7fa f880 	bl	800079c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40023800 	.word	0x40023800

080066a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08c      	sub	sp, #48	; 0x30
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066b0:	f107 031c 	add.w	r3, r7, #28
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	60da      	str	r2, [r3, #12]
 80066be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a37      	ldr	r2, [pc, #220]	; (80067a4 <HAL_SD_MspInit+0xfc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d168      	bne.n	800679c <HAL_SD_MspInit+0xf4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	4a36      	ldr	r2, [pc, #216]	; (80067a8 <HAL_SD_MspInit+0x100>)
 80066d0:	4b35      	ldr	r3, [pc, #212]	; (80067a8 <HAL_SD_MspInit+0x100>)
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066d8:	6453      	str	r3, [r2, #68]	; 0x44
 80066da:	4b33      	ldr	r3, [pc, #204]	; (80067a8 <HAL_SD_MspInit+0x100>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	4a2f      	ldr	r2, [pc, #188]	; (80067a8 <HAL_SD_MspInit+0x100>)
 80066ec:	4b2e      	ldr	r3, [pc, #184]	; (80067a8 <HAL_SD_MspInit+0x100>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	f043 0302 	orr.w	r3, r3, #2
 80066f4:	6313      	str	r3, [r2, #48]	; 0x30
 80066f6:	4b2c      	ldr	r3, [pc, #176]	; (80067a8 <HAL_SD_MspInit+0x100>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	4a28      	ldr	r2, [pc, #160]	; (80067a8 <HAL_SD_MspInit+0x100>)
 8006708:	4b27      	ldr	r3, [pc, #156]	; (80067a8 <HAL_SD_MspInit+0x100>)
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	f043 0304 	orr.w	r3, r3, #4
 8006710:	6313      	str	r3, [r2, #48]	; 0x30
 8006712:	4b25      	ldr	r3, [pc, #148]	; (80067a8 <HAL_SD_MspInit+0x100>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <HAL_SD_MspInit+0x100>)
 8006724:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <HAL_SD_MspInit+0x100>)
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	f043 0308 	orr.w	r3, r3, #8
 800672c:	6313      	str	r3, [r2, #48]	; 0x30
 800672e:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <HAL_SD_MspInit+0x100>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration    
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800673a:	2304      	movs	r3, #4
 800673c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800673e:	2302      	movs	r3, #2
 8006740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006746:	2303      	movs	r3, #3
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800674a:	230c      	movs	r3, #12
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800674e:	f107 031c 	add.w	r3, r7, #28
 8006752:	4619      	mov	r1, r3
 8006754:	4815      	ldr	r0, [pc, #84]	; (80067ac <HAL_SD_MspInit+0x104>)
 8006756:	f7fa f855 	bl	8000804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800675a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800675e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006760:	2302      	movs	r3, #2
 8006762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006764:	2300      	movs	r3, #0
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006768:	2303      	movs	r3, #3
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800676c:	230c      	movs	r3, #12
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006770:	f107 031c 	add.w	r3, r7, #28
 8006774:	4619      	mov	r1, r3
 8006776:	480e      	ldr	r0, [pc, #56]	; (80067b0 <HAL_SD_MspInit+0x108>)
 8006778:	f7fa f844 	bl	8000804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800677c:	2304      	movs	r3, #4
 800677e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006780:	2302      	movs	r3, #2
 8006782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006784:	2300      	movs	r3, #0
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006788:	2303      	movs	r3, #3
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800678c:	230c      	movs	r3, #12
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006790:	f107 031c 	add.w	r3, r7, #28
 8006794:	4619      	mov	r1, r3
 8006796:	4807      	ldr	r0, [pc, #28]	; (80067b4 <HAL_SD_MspInit+0x10c>)
 8006798:	f7fa f834 	bl	8000804 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800679c:	bf00      	nop
 800679e:	3730      	adds	r7, #48	; 0x30
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40023800 	.word	0x40023800
 80067ac:	40020400 	.word	0x40020400
 80067b0:	40020800 	.word	0x40020800
 80067b4:	40020c00 	.word	0x40020c00

080067b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067c0:	f107 0314 	add.w	r3, r7, #20
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	609a      	str	r2, [r3, #8]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a19      	ldr	r2, [pc, #100]	; (800683c <HAL_UART_MspInit+0x84>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d12b      	bne.n	8006832 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	4a18      	ldr	r2, [pc, #96]	; (8006840 <HAL_UART_MspInit+0x88>)
 80067e0:	4b17      	ldr	r3, [pc, #92]	; (8006840 <HAL_UART_MspInit+0x88>)
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e8:	6413      	str	r3, [r2, #64]	; 0x40
 80067ea:	4b15      	ldr	r3, [pc, #84]	; (8006840 <HAL_UART_MspInit+0x88>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	4a11      	ldr	r2, [pc, #68]	; (8006840 <HAL_UART_MspInit+0x88>)
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <HAL_UART_MspInit+0x88>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6313      	str	r3, [r2, #48]	; 0x30
 8006806:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <HAL_UART_MspInit+0x88>)
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006812:	230c      	movs	r3, #12
 8006814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006816:	2302      	movs	r3, #2
 8006818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800681a:	2301      	movs	r3, #1
 800681c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800681e:	2303      	movs	r3, #3
 8006820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006822:	2307      	movs	r3, #7
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006826:	f107 0314 	add.w	r3, r7, #20
 800682a:	4619      	mov	r1, r3
 800682c:	4805      	ldr	r0, [pc, #20]	; (8006844 <HAL_UART_MspInit+0x8c>)
 800682e:	f7f9 ffe9 	bl	8000804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006832:	bf00      	nop
 8006834:	3728      	adds	r7, #40	; 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40004400 	.word	0x40004400
 8006840:	40023800 	.word	0x40023800
 8006844:	40020000 	.word	0x40020000

08006848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006856:	b480      	push	{r7}
 8006858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800685a:	e7fe      	b.n	800685a <HardFault_Handler+0x4>

0800685c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006860:	e7fe      	b.n	8006860 <MemManage_Handler+0x4>

08006862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006862:	b480      	push	{r7}
 8006864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006866:	e7fe      	b.n	8006866 <BusFault_Handler+0x4>

08006868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800686c:	e7fe      	b.n	800686c <UsageFault_Handler+0x4>

0800686e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800686e:	b480      	push	{r7}
 8006870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006872:	bf00      	nop
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006880:	bf00      	nop
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800688a:	b480      	push	{r7}
 800688c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800688e:	bf00      	nop
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800689c:	f7f9 fe8c 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068a0:	bf00      	nop
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068a8:	4a16      	ldr	r2, [pc, #88]	; (8006904 <SystemInit+0x60>)
 80068aa:	4b16      	ldr	r3, [pc, #88]	; (8006904 <SystemInit+0x60>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80068b8:	4a13      	ldr	r2, [pc, #76]	; (8006908 <SystemInit+0x64>)
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <SystemInit+0x64>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80068c4:	4b10      	ldr	r3, [pc, #64]	; (8006908 <SystemInit+0x64>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80068ca:	4a0f      	ldr	r2, [pc, #60]	; (8006908 <SystemInit+0x64>)
 80068cc:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <SystemInit+0x64>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80068d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80068da:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <SystemInit+0x64>)
 80068dc:	4a0b      	ldr	r2, [pc, #44]	; (800690c <SystemInit+0x68>)
 80068de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80068e0:	4a09      	ldr	r2, [pc, #36]	; (8006908 <SystemInit+0x64>)
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <SystemInit+0x64>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <SystemInit+0x64>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <SystemInit+0x60>)
 80068f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068f8:	609a      	str	r2, [r3, #8]
#endif
}
 80068fa:	bf00      	nop
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	e000ed00 	.word	0xe000ed00
 8006908:	40023800 	.word	0x40023800
 800690c:	24003010 	.word	0x24003010

08006910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006948 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006916:	e003      	b.n	8006920 <LoopCopyDataInit>

08006918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800691a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800691c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800691e:	3104      	adds	r1, #4

08006920 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006920:	480b      	ldr	r0, [pc, #44]	; (8006950 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006922:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006928:	d3f6      	bcc.n	8006918 <CopyDataInit>
  ldr  r2, =_sbss
 800692a:	4a0b      	ldr	r2, [pc, #44]	; (8006958 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800692c:	e002      	b.n	8006934 <LoopFillZerobss>

0800692e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800692e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006930:	f842 3b04 	str.w	r3, [r2], #4

08006934 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006934:	4b09      	ldr	r3, [pc, #36]	; (800695c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006938:	d3f9      	bcc.n	800692e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800693a:	f7ff ffb3 	bl	80068a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800693e:	f000 f811 	bl	8006964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006942:	f7ff fbd1 	bl	80060e8 <main>
  bx  lr    
 8006946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006948:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800694c:	08006b00 	.word	0x08006b00
  ldr  r0, =_sdata
 8006950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006954:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8006958:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800695c:	20002190 	.word	0x20002190

08006960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006960:	e7fe      	b.n	8006960 <ADC_IRQHandler>
	...

08006964 <__libc_init_array>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	4e0d      	ldr	r6, [pc, #52]	; (800699c <__libc_init_array+0x38>)
 8006968:	4c0d      	ldr	r4, [pc, #52]	; (80069a0 <__libc_init_array+0x3c>)
 800696a:	1ba4      	subs	r4, r4, r6
 800696c:	10a4      	asrs	r4, r4, #2
 800696e:	2500      	movs	r5, #0
 8006970:	42a5      	cmp	r5, r4
 8006972:	d109      	bne.n	8006988 <__libc_init_array+0x24>
 8006974:	4e0b      	ldr	r6, [pc, #44]	; (80069a4 <__libc_init_array+0x40>)
 8006976:	4c0c      	ldr	r4, [pc, #48]	; (80069a8 <__libc_init_array+0x44>)
 8006978:	f000 f820 	bl	80069bc <_init>
 800697c:	1ba4      	subs	r4, r4, r6
 800697e:	10a4      	asrs	r4, r4, #2
 8006980:	2500      	movs	r5, #0
 8006982:	42a5      	cmp	r5, r4
 8006984:	d105      	bne.n	8006992 <__libc_init_array+0x2e>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800698c:	4798      	blx	r3
 800698e:	3501      	adds	r5, #1
 8006990:	e7ee      	b.n	8006970 <__libc_init_array+0xc>
 8006992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006996:	4798      	blx	r3
 8006998:	3501      	adds	r5, #1
 800699a:	e7f2      	b.n	8006982 <__libc_init_array+0x1e>
 800699c:	08006af8 	.word	0x08006af8
 80069a0:	08006af8 	.word	0x08006af8
 80069a4:	08006af8 	.word	0x08006af8
 80069a8:	08006afc 	.word	0x08006afc

080069ac <memset>:
 80069ac:	4402      	add	r2, r0
 80069ae:	4603      	mov	r3, r0
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d100      	bne.n	80069b6 <memset+0xa>
 80069b4:	4770      	bx	lr
 80069b6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ba:	e7f9      	b.n	80069b0 <memset+0x4>

080069bc <_init>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr

080069c8 <_fini>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr
